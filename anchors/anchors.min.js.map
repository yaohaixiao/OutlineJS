{"version":3,"file":"anchors.min.js","sources":["../utils/types/isString.js","../utils/lang/toString.js","../utils/types/isFunction.js","../utils/types/isObject.js","../utils/types/isElement.js","../utils/types/isArray.js","../utils/lang/cloneDeep.js","../utils/lang/later.js","../utils/lang/timeSlice.js","../utils/lang/easeInQuad.js","../utils/dom/scrollTo.js","../navigator/utils/_getScrollElement.js","../utils/dom/offsetTop.js","../utils/dom/matches.js","../utils/dom/getParentOrHost.js","../utils/event/enum.js","../utils/event/_off.js","../utils/event/_delete.js","../utils/event/purgeElement.js","../utils/event/getListeners.js","../utils/event/off.js","../utils/event/on.js","../utils/event/getTarget.js","../utils/dom/resolveTextNode.js","../utils/dom/closest.js","../utils/icons/symbols.js","../utils/icons/getSymbols.js","../utils/icons/getSymbol.js","../utils/icons/paint.js","../utils/icons/add.js","../utils/lang/trim.js","../chapters/getChaptersByHeadings.js","../utils/lang/stripTags.js","../chapters/_getChapterParentIdByDiffer.js","../chapters/_getChaptersWithCode.js","../chapters/getChapters.js","../utils/lang/toTree.js","../utils/lang/hasOwn.js","../utils/observer/_subscribers.js","../utils/observer/_hasDirectSubscribersFor.js","../utils/observer/has.js","../utils/observer/_hasSubscribers.js","../utils/observer/emit.js","../utils/types/isTypedArray.js","../utils/lang/guid.js","../utils/observer/_removeSubscriber.js","../utils/observer/off.js","../utils/observer/_removeSubscriberByToken.js","../base/component.js","../utils/lang/extend.js","../utils/observer/on.js","../utils/types/isHTMLCollection.js","../utils/types/isDOM.js","../utils/types/isFragment.js","../utils/types/isTextNode.js","../utils/dom/hasClass.js","../utils/dom/setAttribute.js","../utils/dom/addClass.js","../utils/dom/setAttributes.js","../utils/icons/createElement.js","../utils/types/isSVG.js","utils/_updateHeading.js","../utils/icons/icon.js","../utils/dom/createElement.js","../utils/dom/removeClass.js","utils/_removeHeading.js","../utils/types/isEmpty.js","symbols.js","anchors.js","../utils/dom/getScrollElement.js","../utils/event/stop.js"],"sourcesContent":["/**\r\n * 检测数据是否为 String 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} str\r\n * @returns {boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * Object 对象原型上的 toString 方法\r\n * ========================================================================\r\n * @method toString\r\n * @param {*} val\r\n * @returns {string}\r\n */\r\nconst toString = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default toString\r\n","import toString from '../../utils/lang/toString'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return typeof val === 'function' || toString(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","import toString from '../lang/toString'\r\nimport isFunction from './isFunction'\r\n\r\n/**\r\n * 检测数据是否为 Object 类型\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isObject = (o) => {\r\n  return (\r\n    (toString(o) === '[object Object]' ||\r\n      typeof o === 'object' ||\r\n      isFunction(o)) &&\r\n    o !== null\r\n  )\r\n}\r\n\r\nexport default isObject\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测数据是否为 HTMLElement DOM 节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isElement = (o) => {\r\n  return !!(isObject(o) && o.nodeName && o.tagName && o.nodeType === 1)\r\n}\r\n\r\nexport default isElement\r\n","import toString from '../../utils/lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","import isObject from '../../utils/types/isObject'\r\nimport isArray from '../../utils/types/isArray'\r\n\r\n/**\r\n * 深拷贝对象函数\r\n * ========================================================================\r\n * @methods cloneDeep\r\n * @param {Object} obj - 深拷贝的对象\r\n * @returns {Array|Object|*}\r\n *\r\n * @example\r\n * const arr = cloneDeep([2,3,4,6])\r\n * => [2,3,4,6]\r\n */\r\nconst cloneDeep = (obj) => {\r\n  let clone = {}\r\n\r\n  if (obj === null) {\r\n    return null\r\n  }\r\n\r\n  if (isArray(obj)) {\r\n    clone = Array.from(obj)\r\n  } else {\r\n    clone = Object.assign({}, obj)\r\n    Object.keys(clone).forEach((key) => {\r\n      return (clone[key] = isObject(obj[key]) ? cloneDeep(obj[key]) : obj[key])\r\n    })\r\n  }\r\n\r\n  return clone\r\n}\r\n\r\nexport default cloneDeep\r\n","import isFunction from '../../utils/types/isFunction'\r\n\r\n/**\r\n * later - 延迟执行方法\r\n * ========================================================================\r\n * @method later\r\n * @param {Function} fn\r\n * @param {Number} [delay]\r\n * @returns {number|boolean}\r\n */\r\nconst later = (fn, delay = 300) => {\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  return setTimeout(() => {\r\n    fn()\r\n  }, delay)\r\n}\r\n\r\nexport default later\r\n","/**\r\n * timeSlice.js 时间切片功能函数\r\n * ====================================================\r\n * Created By: Yaohaixiao\r\n * Update: 2023.09.04\r\n */\r\nimport isFunction from '../../utils/types/isFunction'\r\nimport later from './later'\r\n\r\nconst queue = []\r\nlet isHandling\r\nlet done\r\n\r\n// Shim from https://developers.google.com/web/updates/2015/08/using-requestidlecallback\r\nif (typeof window.requestIdleCallback === 'undefined') {\r\n  window.requestIdleCallback = function (cb) {\r\n    const start = Date.now()\r\n    return later(function () {\r\n      cb({\r\n        didTimeout: false,\r\n        timeRemaining: function () {\r\n          return Math.max(0, 50 - (Date.now() - start))\r\n        }\r\n      })\r\n    }, 10)\r\n  }\r\n\r\n  window.cancelIdleCallback = function (id) {\r\n    clearTimeout(id)\r\n  }\r\n}\r\n\r\nfunction runIdle(idleDeadline) {\r\n  while (idleDeadline.timeRemaining() > 0 && queue.length) {\r\n    const fn = queue.shift()\r\n\r\n    if (!isFunction(fn)) {\r\n      return false\r\n    }\r\n\r\n    fn()\r\n  }\r\n\r\n  if (queue.length) {\r\n    isHandling = requestIdleCallback(runIdle)\r\n  } else {\r\n    isHandling = 0\r\n\r\n    if (isFunction(done)) {\r\n      done()\r\n      done = null\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 时间切片功能函数：主要用于优化长时任务的性能，将长时任务分解成\r\n * 多个短时间任务\r\n * ====================================================\r\n * @param {Function} fn - 需要在空闲时执行的回调函数\r\n * @param {Function} afterComplete - queen 的\r\n * @return {(function(): (boolean|undefined))|*|boolean}\r\n */\r\nconst timeSlice = (fn, afterComplete = null) => {\r\n  queue.push(fn)\r\n\r\n  if (isFunction(afterComplete)) {\r\n    done = afterComplete\r\n  }\r\n\r\n  if (!isHandling) {\r\n    requestIdleCallback(runIdle)\r\n  }\r\n}\r\n\r\nexport default timeSlice\r\n","/**\r\n * 返回给定值的平方值\r\n * ========================================================================\r\n * @method easeInQuad\r\n * @param {Number} x\r\n * @returns {number}\r\n */\r\nconst easeInQuad = (x) => {\r\n  return x * x\r\n}\r\n\r\nexport default easeInQuad\r\n","import easeInQuad from '../lang/easeInQuad'\r\nimport isFunction from '../types/isFunction'\r\nimport _getScrollElement from '../../navigator/utils/_getScrollElement'\r\n\r\n/**\r\n * 指定 rootElement DOM 节点滚动到指定 top 位置\r\n * ========================================================================\r\n * @method scrollTo\r\n * @param {HTMLElement|Object} [scrollElement] - （必须）要滚动的 DOM 节点\r\n * @param {Number} top - （必须）滚动的 scrollTop 数值\r\n * @param {Function} [afterStop] - （可选）滚动完成的回调函数\r\n */\r\nconst scrollTo = (scrollElement, top, afterStop) => {\r\n  const $scrollElement = _getScrollElement(scrollElement)\r\n  let scrollTop = $scrollElement.scrollTop\r\n  let step = 0\r\n  const distance = top - scrollTop\r\n  const MAX_HEIGHT = $scrollElement.scrollHeight\r\n  const MAX_TOP = top - MAX_HEIGHT <= 0 ? top : MAX_HEIGHT\r\n  const stop = (top) => {\r\n    if (isFunction(afterStop)) {\r\n      afterStop(top)\r\n    }\r\n\r\n    return false\r\n  }\r\n  const play = () => {\r\n    step += 1\r\n\r\n    // 向上滚动\r\n    if (distance < 0) {\r\n      scrollTop -= easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop <= top) {\r\n        $scrollElement.scrollTop = top\r\n        return stop(top)\r\n      }\r\n    } else {\r\n      scrollTop += easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop >= MAX_TOP) {\r\n        $scrollElement.scrollTop = MAX_TOP\r\n        return stop(MAX_TOP)\r\n      }\r\n    }\r\n\r\n    // eslint-disable-next-line compat/compat\r\n    requestAnimationFrame(play)\r\n  }\r\n\r\n  // eslint-disable-next-line compat/compat\r\n  requestAnimationFrame(play)\r\n}\r\n\r\nexport default scrollTo\r\n","import isString from '../../utils/types/isString'\r\nimport isElement from '../../utils/types/isElement'\r\n\r\n/**\r\n * 通过给的 scrollElement 参数，获取滚动 DOM 元素\r\n * ========================================================================\r\n * @method _getScrollElement\r\n * @param {String|HTMLElement} scrollElement\r\n * @returns {Element}\r\n * @private\r\n */\r\nconst _getScrollElement = (scrollElement = null) => {\r\n  let $rootElements\r\n  let $scrollElement\r\n\r\n  if (!scrollElement) {\r\n    $rootElements = document.querySelectorAll('html,body')\r\n    $scrollElement =\r\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\r\n        ? $rootElements[0]\r\n        : $rootElements[1]\r\n  } else {\r\n    if (isString(scrollElement)) {\r\n      $scrollElement = document.querySelector(scrollElement)\r\n    } else if (isElement(scrollElement)) {\r\n      $scrollElement = scrollElement\r\n    }\r\n  }\r\n\r\n  return $scrollElement\r\n}\r\n\r\nexport default _getScrollElement\r\n","/**\r\n * 获取 DOM 节点相对于窗口的 left （纵坐标）值\r\n * ========================================================================\r\n * @method offsetTop\r\n * @param {HTMLElement} el - DOM 节点\r\n * @returns {Number}\r\n */\r\nconst offsetTop = (el) => {\r\n  let top = el.offsetTop\r\n\r\n  if (el.offsetParent !== null) {\r\n    top += offsetTop(el.offsetParent)\r\n  }\r\n\r\n  return top\r\n}\r\n\r\nexport default offsetTop\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from '../../utils/types/isString'\r\nimport isElement from '../../utils/types/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import isString from '../../utils/types/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from '../types/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement|Object} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    purgeElement(el, type)\r\n    return false\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","import closest from '../../utils/dom/closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （可选） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el) {\r\n    return false\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import resolveTextNode from '../../utils/dom/resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector.startsWith('>')\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","const SYMBOLS = []\r\n\r\nexport default SYMBOLS\r\n","import isString from '../../utils/types/isString'\r\nimport getSymbol from './getSymbol'\r\nimport SYMBOLS from './symbols'\r\n\r\n/**\r\n *\r\n * @method getSymbols\r\n * @param {String} [name]\r\n * @param {String} [iconSet]\r\n * @returns {string[]|*}\r\n */\r\nconst getSymbols = (name, iconSet = 'icon') => {\r\n  if (isString(name)) {\r\n    return getSymbol(name, iconSet)\r\n  }\r\n\r\n  return [...SYMBOLS]\r\n}\r\n\r\nexport default getSymbols\r\n","import SYMBOLS from './symbols'\r\n\r\n/**\r\n * @method getSymbol\r\n * @param {String} name\r\n * @param {String} [iconSet]\r\n * @returns {String}\r\n */\r\nconst getSymbol = (name, iconSet = 'icon') => {\r\n  const patternName = /id=\"(.*?)\"/\r\n  const patternSet = /^(\\w+)-/\r\n  const symbols = SYMBOLS\r\n\r\n  return symbols.find((symbol) => {\r\n    const names = patternName.exec(symbol)\r\n    const fullName = names[1]\r\n    const sets = patternSet.exec(fullName)\r\n    const setName = sets[1]\r\n    const iconName =\r\n      iconSet === 'icon' ? `${iconSet}-${name}` : `${iconSet}-icon-${name}`\r\n\r\n    return setName === iconSet && fullName === iconName\r\n  })\r\n}\r\n\r\nexport default getSymbol\r\n","import add from './add'\r\nimport getSymbols from './getSymbols'\r\n\r\n/**\r\n * 绘制 SVG 图标集\r\n * ========================================================================\r\n * @method paint\r\n * @param {String|Array} symbol\r\n */\r\nconst paint = (symbol = '') => {\r\n  const $body = document.body\r\n  let $icons = document.querySelector('#outline-icons')\r\n  let symbols = []\r\n\r\n  add(symbol)\r\n  symbols = getSymbols()\r\n\r\n  if ($icons) {\r\n    $icons.innerHTML = symbols.join('')\r\n  } else {\r\n    $icons = document.createElement('div')\r\n    $icons.innerHTML =\r\n      `<svg id=\"outline-icons\" aria-hidden=\"true\" style=\"position:absolute;display:none;width:0;height:0;overflow:hidden;\">` +\r\n      `${symbols.join('')}` +\r\n      `</svg>`\r\n    $body.insertBefore($icons.firstChild, $body.firstChild)\r\n  }\r\n}\r\n\r\nexport default paint\r\n","import isArray from '../../utils/types/isArray'\r\nimport isString from '../../utils/types/isString'\r\nimport SYMBOLS from './symbols'\r\n\r\n/**\r\n * @method add\r\n * @param {Array|String} symbols\r\n * @return {Boolean}\r\n */\r\nconst add = (symbols) => {\r\n  if (!symbols) {\r\n    return false\r\n  }\r\n\r\n  if (isArray(symbols) && symbols.length > 0) {\r\n    symbols.forEach((symbol) => {\r\n      /* istanbul ignore else */\r\n      if (SYMBOLS.indexOf(symbol) === -1 && isString(symbol)) {\r\n        SYMBOLS.push(symbol)\r\n      }\r\n    })\r\n  } else {\r\n    /* istanbul ignore else */\r\n    if (isString(symbols)) {\r\n      SYMBOLS.push(symbols)\r\n    }\r\n  }\r\n}\r\n\r\nexport default add\r\n","import isString from '../../utils/types/isString'\r\n\r\n/**\r\n * 清楚字符串起始位置所有的空格\r\n * ========================================================================\r\n * @method trim\r\n * @param {string} str\r\n * @returns {string|Boolean}\r\n */\r\nconst trim = (str) => {\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n  return str.replace(/(^\\s+)|(\\s+$)/g, '')\r\n}\r\n\r\nexport default trim\r\n","import trim from '../utils/lang/trim'\r\nimport stripTags from '../utils/lang/stripTags'\r\nimport isFunction from '../utils/types/isFunction'\r\n\r\nimport _getChapterParentIdByDiffer from './_getChapterParentIdByDiffer'\r\nimport _getChaptersWithCode from './_getChaptersWithCode'\r\n\r\n/**\r\n * 根据文章中的 h1~h6 标签，自动分析返回文章章节数据\r\n * ========================================================================\r\n * @method getChaptersByHeadings\r\n * @param {Array} headings\r\n * @param {Boolean} [showCode]\r\n * @param {Function} [chapterTextFilter]\r\n * @return {*|*[]}\r\n */\r\nconst getChaptersByHeadings = (\r\n  headings,\r\n  showCode = false,\r\n  chapterTextFilter = null\r\n) => {\r\n  const pattern = /^\\d(\\.|(\\.\\d+)*)\\s?/gi\r\n  const chapters = []\r\n  let previous = 1\r\n  let level = 0\r\n  let text = ''\r\n\r\n  headings.forEach((heading, i) => {\r\n    const tagName = heading.tagName\r\n    const headingLevel = tagName.replace(/h/i, '')\r\n    let current = parseInt(headingLevel, 10)\r\n    let pid = -1\r\n\r\n    // 场景1：当前标题是前一个标题的子标题\r\n    // 当前标题的（标题标签）序号 > 前一个标题的序号：两个相连的标题是父标题 -> 子标题关系；\r\n    // h2 （前一个标题）\r\n    // h3 （当前标题）\r\n    if (current > previous) {\r\n      level += 1\r\n\r\n      // 第一层级的 pid 是 -1\r\n      if (level === 1) {\r\n        pid = -1\r\n      } else {\r\n        pid = i - 1\r\n      }\r\n    }\r\n    // 场景2：当前标题和前一个标题层级相同\r\n    // 当前标题的（标题标签）序号 = 前一个标题的序号\r\n    // h2 （前一个标题）\r\n    // h2 （当前标题）\r\n    // 当前标题的（标题标签）序号 < 前一个标题的序号，并且当前标题序号 > 当前的级别\r\n    // h2\r\n    // h4 （前一个标题）\r\n    // h3 （当前标题：这种情况我们还是任务 h3 是 h2 的下一级章节）\r\n    else if (current === previous || (current < previous && current > level)) {\r\n      // H1 的层级肯定是 1\r\n      if (current === 1) {\r\n        level = 1\r\n        pid = -1\r\n      } else {\r\n        pid = chapters[i - 1].pid\r\n      }\r\n    }\r\n    // 场景3：当前标题比前一个标题层级高\r\n    else if (current <= level) {\r\n      // H1 的层级肯定是 1\r\n      if (current === 1) {\r\n        level = 1\r\n      } else {\r\n        level = level - (previous - current)\r\n\r\n        if (level <= 1) {\r\n          level = 1\r\n        }\r\n      }\r\n\r\n      // 第一级的标题\r\n      if (level === 1) {\r\n        pid = -1\r\n      } else {\r\n        // 通过当前标题和前一个标题之间的等级差，获得当前标题的父标题ID\r\n        pid = _getChapterParentIdByDiffer(chapters, previous - current, i)\r\n      }\r\n    }\r\n\r\n    previous = current\r\n\r\n    text = trim(stripTags(heading.innerHTML))\r\n\r\n    // 如果自动生成章节编号，则去掉标题中自带的编号文本\r\n    if (showCode) {\r\n      text = trim(text.replace(pattern, ''))\r\n    }\r\n\r\n    if (isFunction(chapterTextFilter)) {\r\n      text = chapterTextFilter(text)\r\n    }\r\n\r\n    chapters.push({\r\n      id: i,\r\n      pid: pid,\r\n      level: level,\r\n      rel: `heading-${i}`,\r\n      text,\r\n      tagName\r\n    })\r\n  })\r\n\r\n  return showCode ? _getChaptersWithCode(chapters) : chapters\r\n}\r\n\r\nexport default getChaptersByHeadings\r\n","import isString from '../../utils/types/isString'\r\n\r\n/**\r\n * 过滤所有 HTML 标签\r\n * ========================================================================\r\n * @method stripTags\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nconst stripTags = (str) => {\r\n  if (!isString(str)) {\r\n    return ''\r\n  }\r\n  return str.replace(/<\\/?[^>]+(>|$)/g, '')\r\n}\r\n\r\nexport default stripTags\r\n","const _getChapterParentIdByDiffer = (chapters, differ, index) => {\r\n  let previous = chapters[index - 1]\r\n  let pid\r\n  let i\r\n\r\n  for (i = 0; i < differ; i += 1) {\r\n    pid = previous.pid\r\n    previous = chapters[pid]\r\n  }\r\n\r\n  pid = previous.pid\r\n\r\n  return pid\r\n}\r\n\r\nexport default _getChapterParentIdByDiffer\r\n","import isArray from '../utils/types/isArray'\r\n\r\nconst _getChaptersWithCode = (chapters) => {\r\n  const groups = {}\r\n  const cb = (o) => {\r\n    return [o.pid]\r\n  }\r\n\r\n  chapters.forEach((o) => {\r\n    const group = JSON.stringify(cb(o))\r\n\r\n    groups[group] = groups[group] || []\r\n    groups[group].push(o)\r\n\r\n    o.index = groups[group].length\r\n\r\n    if (o.pid === -1) {\r\n      o.code = String(o.index)\r\n    }\r\n  })\r\n\r\n  Object.keys(groups).forEach((group) => {\r\n    groups[group].forEach((c) => {\r\n      const subjects = groups[`[${c.id}]`]\r\n\r\n      if (!subjects || !isArray(subjects)) {\r\n        return false\r\n      }\r\n\r\n      subjects.forEach((o) => {\r\n        o.code = c.code + '.' + o.index\r\n      })\r\n    })\r\n  })\r\n\r\n  return chapters\r\n}\r\n\r\nexport default _getChaptersWithCode\r\n","import isString from '../utils/types/isString'\r\nimport isFunction from '../utils/types/isFunction'\r\nimport isElement from '../utils/types/isElement'\r\nimport toTree from '../utils/lang/toTree'\r\n\r\nimport getChaptersByHeadings from './getChaptersByHeadings'\r\n\r\n/**\r\n *\r\n * @param {Object} [options]\r\n * @param {String|HTMLElement} [options.articleElement]\r\n * @param {String} [options.selector]\r\n * @param {Boolean} [options.showCode]\r\n * @param {Function} [options.chapterTextFilter]\r\n * @param {Boolean} [options.isTreeStructured]\r\n * @returns {Array}\r\n */\r\nconst getChapters = (options) => {\r\n  const {\r\n    articleElement,\r\n    selector,\r\n    showCode,\r\n    chapterTextFilter,\r\n    isTreeStructured\r\n  } = options\r\n  let $article = document.querySelector('#article')\r\n  let $headings = []\r\n  let chapters = []\r\n  let filter = null\r\n\r\n  if (isString(articleElement)) {\r\n    $article = document.querySelector(articleElement)\r\n  } else if (isElement(articleElement)) {\r\n    $article = articleElement\r\n  }\r\n\r\n  if (!$article) {\r\n    return chapters\r\n  }\r\n\r\n  if (isFunction(chapterTextFilter)) {\r\n    filter = chapterTextFilter\r\n  } else {\r\n    if (chapterTextFilter === true) {\r\n      filter = (text) => {\r\n        return text.replace(/\\(.*?\\)/, '()')\r\n      }\r\n    }\r\n  }\r\n\r\n  $headings = [...$article.querySelectorAll(selector || 'h1,h2,h3,h4,h5,h6')]\r\n  chapters = getChaptersByHeadings($headings, showCode, filter)\r\n\r\n  return isTreeStructured === true ? toTree(chapters, 'id', 'pid') : chapters\r\n}\r\n\r\nexport default getChapters\r\n","const toTree = (list, nodeKey, parentKey) => {\r\n  const map = {}\r\n  const roots = []\r\n\r\n  list.forEach((item, i) => {\r\n    // initialize the map\r\n    map[item[nodeKey]] = i\r\n    // initialize the children\r\n    item.children = []\r\n  })\r\n\r\n  list.forEach((item) => {\r\n    const node = list[map[item[parentKey]]]\r\n\r\n    if (item[parentKey] !== -1) {\r\n      // if you have dangling branches check that map[node.parentId] exists\r\n      node.children.push(item)\r\n    } else {\r\n      roots.push(item)\r\n    }\r\n  })\r\n\r\n  return roots\r\n}\r\n\r\nexport default toTree\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","/**\r\n * 存储订阅者（主题和处理器的）私有对象\r\n * ========================================================================\r\n * @type {{}}\r\n * @private\r\n */\r\nconst _subscribers = {}\r\n\r\nexport default _subscribers\r\n","import hasOwn from '../../utils/lang/hasOwn'\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\r\n * ========================================================================\r\n * @method _hasDirectSubscribersFor\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasDirectSubscribersFor = (topic) => {\r\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\r\n}\r\n\r\nexport default _hasDirectSubscribersFor\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _hasSubscribers from './_hasSubscribers'\r\n\r\n/**\r\n * 判断是否存在包含 topic 指定的订阅者信息\r\n * ========================================================================\r\n * @method has\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\r\n * @returns {Boolean}\r\n */\r\nconst has = (topic, isDirect = true) => {\r\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\r\n}\r\n\r\nexport default has\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * 判断是否存在包含给定 topic 相关的订阅者信息\r\n * ========================================================================\r\n * @method _hasSubscribers\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasSubscribers = (topic) => {\r\n  let found = _hasDirectSubscribersFor(topic)\r\n  let position = topic.lastIndexOf('.')\r\n\r\n  while (!found && position !== -1) {\r\n    topic = topic.substring(0, position)\r\n    position = topic.lastIndexOf('.')\r\n    found = _hasDirectSubscribersFor(topic)\r\n  }\r\n\r\n  return found\r\n}\r\n\r\nexport default _hasSubscribers\r\n","import isTypedArray from '../../utils/types/isTypedArray'\r\nimport has from './has'\r\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * （异步）发布订阅主题信息\r\n * ========================================================================\r\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\r\n * ========================================================================\r\n * @method emit\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} [data] - （可选）数据对象\r\n * @param {Boolean} [async] - (可选) 是否异步发布\r\n */\r\nconst emit = (topic, data, async = true) => {\r\n  const execute = (topic) => {\r\n    if (!_hasDirectSubscribersFor(topic)) {\r\n      return false\r\n    }\r\n\r\n    _subscribers[topic].forEach((subscriber) => {\r\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\r\n      // 采用 toString() 方法转化为普通（JSON）字符串\r\n      const message = isTypedArray(data) ? data.toString() : data\r\n\r\n      subscriber.callback.call(subscriber.context || subscriber, message)\r\n    })\r\n  }\r\n  const deliver = () => {\r\n    let subscriber = topic\r\n    let position = topic.lastIndexOf('.')\r\n\r\n    while (position !== -1) {\r\n      subscriber = subscriber.substring(0, position)\r\n      position = subscriber.lastIndexOf('.')\r\n\r\n      execute(subscriber)\r\n    }\r\n\r\n    // 执行 topic 对应的处理器\r\n    execute(topic)\r\n    // 执行特殊 topic：'*'（监听全部消息的发布）\r\n    execute('*')\r\n  }\r\n\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (async) {\r\n    setTimeout(deliver, 10)\r\n  } else {\r\n    deliver()\r\n  }\r\n}\r\n\r\nexport default emit\r\n","import toString from '../../utils/lang/toString'\r\n/**\r\n * 判断检测数据是否为 Typed Arrays 类型的数据\r\n * ========================================================================\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nconst isTypedArray = (val) => {\r\n  const TYPES = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]',\r\n    '[object BigInt64Array]',\r\n    '[object BigUint64Array]'\r\n  ]\r\n\r\n  return TYPES.indexOf(toString(val)) > -1\r\n}\r\n\r\nexport default isTypedArray\r\n","/**\r\n * 生成唯一 id 字符串的函数\r\n * ========================================================================\r\n * @method guid\r\n * @param {String} [prefix] - 生成 id 的前缀字符串\r\n * @return {String} 返回一个表示唯一 id 的字符串\r\n */\r\nconst guid = (() => {\r\n  let uuid = 0\r\n\r\n  return (prefix) => {\r\n    uuid += 1\r\n\r\n    return prefix ? prefix + '-' + uuid : 'guid-' + uuid\r\n  }\r\n})()\r\n\r\nexport default guid\r\n","import hasOwn from '../../utils/lang/hasOwn'\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * 删除与给定 topic 相同的订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscriber\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _removeSubscriber = (topic) => {\r\n  if (!hasOwn(_subscribers, topic)) {\r\n    return false\r\n  }\r\n\r\n  delete _subscribers[topic]\r\n}\r\n\r\nexport default _removeSubscriber\r\n","import has from './has'\r\nimport _removeSubscriber from './_removeSubscriber'\r\nimport _removeSubscriberByToken from './_removeSubscriberByToken'\r\n\r\n/**\r\n * 取消订阅主题\r\n * ========================================================================\r\n * @method off\r\n * @param {String} topic - （必须）订阅的主题\r\n * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\r\n */\r\nconst off = (topic, token) => {\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (token) {\r\n    _removeSubscriberByToken(token)\r\n  } else {\r\n    _removeSubscriber(topic)\r\n  }\r\n}\r\n\r\nexport default off\r\n","import _subscribers from './_subscribers'\r\nimport _removeSubscriber from './_removeSubscriber'\r\n\r\n/**\r\n * 通过订阅者 token 值删除订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscriberByToken\r\n * @param {String} token - 订阅者 token 字符串\r\n * @returns {boolean}\r\n * @private\r\n */\r\nconst _removeSubscriberByToken = (token) => {\r\n  const keys = Object.keys(_subscribers)\r\n  let index = -1\r\n\r\n  if (!token || keys.length < 1) {\r\n    return false\r\n  }\r\n\r\n  keys.forEach((subject) => {\r\n    const subscriber = _subscribers[subject]\r\n    let topic\r\n\r\n    subscriber.forEach((execution, j) => {\r\n      if (execution.callback === token || execution.token === token) {\r\n        topic = execution.topic\r\n        subscriber.splice(index, j)\r\n      }\r\n    })\r\n\r\n    /* istanbul ignore else */\r\n    if (subscriber.length < 1) {\r\n      _removeSubscriber(topic)\r\n    }\r\n  })\r\n}\r\n\r\nexport default _removeSubscriberByToken\r\n","import isString from '../utils/types/isString'\r\nimport isObject from '../utils/types/isObject'\r\n\r\nimport extend from '../utils/lang/extend'\r\nimport hasOwn from '../utils/lang/hasOwn'\r\n\r\nimport publish from '../utils/observer/emit'\r\nimport subscribe from '../utils/observer/on'\r\nimport unsubscribe from '../utils/observer/off'\r\n\r\nclass Component {\r\n  constructor(options) {\r\n    this.name = 'component'\r\n    this.attrs = {}\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    this.attr(options).render().addListeners()\r\n    return this\r\n  }\r\n\r\n  attr(prop, value) {\r\n    const attrs = this.attrs\r\n\r\n    if (isString(prop)) {\r\n      // 只能扩展 attrs 中已有的属性\r\n      if (value && hasOwn(attrs, prop)) {\r\n        // 更新单个配置信息\r\n        attrs[prop] = value\r\n        return this\r\n      }\r\n\r\n      // 只传递 prop 参数，则返回对应的属性值\r\n      return attrs[prop]\r\n    } else if (isObject(prop)) {\r\n      // 批量更新配置信息\r\n      extend(attrs, prop)\r\n\r\n      return this\r\n    } else if (arguments.length === 0) {\r\n      // 不传递参数，直接返回整个\r\n      return attrs\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    return this\r\n  }\r\n\r\n  refresh() {\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    this.removeListeners()\r\n    return this\r\n  }\r\n\r\n  reload(options) {\r\n    let attrs = this.attr()\r\n\r\n    if (options) {\r\n      attrs = this.attr(options)\r\n    }\r\n\r\n    this.destroy().initialize(attrs)\r\n\r\n    return this\r\n  }\r\n\r\n  $emit(event, data) {\r\n    publish(event, data)\r\n    return this\r\n  }\r\n\r\n  $on(event, callback) {\r\n    subscribe(event, callback, this)\r\n    return this\r\n  }\r\n\r\n  $off(event, callback) {\r\n    unsubscribe(event, callback)\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Component\r\n","import hasOwn from './hasOwn'\r\n\r\n/**\r\n * 扩展对象\r\n * ========================================================================\r\n * @method extend\r\n * @param {Object} origin\r\n * @param {Object} source\r\n */\r\nconst extend = (origin, source) => {\r\n  const keys = Object.keys(source)\r\n\r\n  keys.forEach((prop) => {\r\n    if (hasOwn(source, prop)) {\r\n      origin[prop] = source[prop]\r\n    }\r\n  })\r\n}\r\n\r\nexport default extend\r\n","import isFunction from '../../utils/types/isFunction'\r\nimport guid from '../../utils/lang/guid'\r\n\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * 订阅主题，并给出处理器函数\r\n * ========================================================================\r\n * @method on\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Function} handler - （必须）主题的处理器函数\r\n * @param {Object} [context] - （可选）指定 this 执行上下文\r\n * @return {String} - 唯一的 token 字符串，例如：'guid-1'。\r\n */\r\nconst on = (topic, handler, context = null) => {\r\n  const token = guid()\r\n  let subject = typeof topic === 'symbol' ? topic.toString() : topic\r\n\r\n  if (!isFunction(handler)) {\r\n    return ''\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (!_subscribers[subject]) {\r\n    _subscribers[subject] = []\r\n  }\r\n\r\n  _subscribers[subject].push({\r\n    topic: subject,\r\n    callback: handler,\r\n    context,\r\n    token\r\n  })\r\n\r\n  return token\r\n}\r\n\r\nexport default on\r\n","import toString from '../../utils/lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isHTMLCollection = (el) => {\r\n  return !!(isObject(el) && toString(el) === '[object NodeList]')\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\nconst isDOM = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import toString from '../../utils/lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isFragment = (fragment) => {\r\n  return !!(\r\n    isObject(fragment) && toString(fragment) === '[object DocumentFragment]'\r\n  )\r\n}\r\n\r\nexport default isFragment\r\n","import toString from '../../utils/lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isTextNode = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (toString(el) === '[object Text]' || (el.tagName && el.nodeType === 3))\r\n  )\r\n}\r\n\r\nexport default isTextNode\r\n","import isElement from '../types/isElement'\r\n/**\r\n * 检测 DOM 节点是否包含名为 className 的样式\r\n * ========================================================================\r\n * @method hasClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst hasClass = (el, className) => {\r\n  const pattern = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\r\n  let allClass\r\n  let classList\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  allClass = el.className\r\n\r\n  if (!allClass) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList && classList.contains) {\r\n    return el.classList.contains(className)\r\n  }\r\n\r\n  return !!pattern.exec(allClass)\r\n}\r\n\r\nexport default hasClass\r\n","import addClass from './addClass.js'\r\n\r\n/**\r\n * 给 DOM 节点设置属性/值\r\n * ========================================================================\r\n * @method setAttribute\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} attr - 属性名称\r\n * @param {String|Number|Boolean} value - 属性值\r\n */\r\nconst setAttribute = (el, attr, value) => {\r\n  let tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'style':\r\n      el.style.cssText = value\r\n      break\r\n    case 'value':\r\n      if (tagName === 'input' || tagName === 'textarea') {\r\n        el.value = value\r\n      } else {\r\n        el.setAttribute(attr, value)\r\n      }\r\n      break\r\n    case 'htmlFor':\r\n      el.setAttribute('for', value)\r\n      break\r\n    case 'className':\r\n      addClass(el, value)\r\n      break\r\n    case 'innerHTML':\r\n      el.innerHTML = value\r\n      break\r\n    case 'innerText':\r\n      el.innerText = value\r\n      break\r\n    default:\r\n      el.setAttribute(attr, value)\r\n      break\r\n  }\r\n}\r\n\r\nexport default setAttribute\r\n","import hasClass from './hasClass'\r\n\r\n/**\r\n * 给 DOM 节点添加名为 className 的样式\r\n * ========================================================================\r\n * @method addClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst addClass = (el, className) => {\r\n  let classList\r\n  let allClass\r\n\r\n  if (hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.add) {\r\n    if (className.indexOf(' ') > -1) {\r\n      className.split(' ').forEach((name) => {\r\n        classList.add(name)\r\n      })\r\n    } else {\r\n      classList.add(className)\r\n    }\r\n  } else {\r\n    allClass = el.className\r\n    allClass += allClass.length > 0 ? ' ' + className : className\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default addClass\r\n","import isObject from '../types/isObject'\r\nimport hasOwn from '../lang/hasOwn'\r\nimport setAttribute from './setAttribute'\r\n\r\nconst setAttributes = (el, attrs) => {\r\n  if (!el || !isObject(attrs)) {\r\n    return false\r\n  }\r\n\r\n  Object.keys(attrs).forEach((attr) => {\r\n    const value = attrs[attr]\r\n    if (hasOwn(attrs, attr)) {\r\n      setAttribute(el, attr, value)\r\n    }\r\n  })\r\n}\r\n\r\nexport default setAttributes\r\n","import isArray from '../../utils/types/isArray'\r\nimport isString from '../../utils/types/isString'\r\nimport isSVG from '../../utils/types/isSVG'\r\nimport setAttributes from '../../utils/dom/setAttributes'\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} name\r\n * @param {Object} [options]\r\n * @param {Number|Array} [options.size]\r\n * @param {String} [options.color]\r\n * @param {String} [options.iconSet]\r\n * @param {Object} [options.attrs]\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (name, options = {}) => {\r\n  const ICON = 'outline-icon'\r\n  const size = options.size || 0\r\n  const color = options.color || ''\r\n  const iconSet = options.iconSet || ''\r\n  const width = isArray(size) ? size[0] : size\r\n  const height = isArray(size) ? size[1] : size\r\n  const defaultRules = size ? `width:${width}px;height:${height}px;` : ''\r\n  const cssRules = color ? defaultRules + `color:${color}` : defaultRules\r\n  const attrs = options.attrs || {}\r\n  const $icon = document.createElement('i')\r\n  let binds = ''\r\n  let svg = ''\r\n  let $svg\r\n\r\n  if (!isString(name)) {\r\n    return null\r\n  }\r\n\r\n  if (isSVG(name)) {\r\n    svg = name\r\n  } else {\r\n    binds =\r\n      iconSet && iconSet !== 'icon'\r\n        ? `xlink:href=\"#${iconSet}-icon-${name}\"`\r\n        : `xlink:href=\"#icon-${name}\"`\r\n    svg = `<svg><use ${binds}></use></svg>`\r\n  }\r\n\r\n  $icon.innerHTML = svg\r\n\r\n  if (attrs.className) {\r\n    attrs.className = `${ICON} ${attrs.className}`\r\n  } else {\r\n    attrs.className = ICON\r\n  }\r\n\r\n  setAttributes($icon, attrs)\r\n\r\n  $svg = $icon.querySelector('svg')\r\n  setAttributes($svg, {\r\n    'aria-hidden': true,\r\n    xmlns: 'http://www.w3.org/2000/svg',\r\n    class: 'outline-icon__svg',\r\n    width: 200,\r\n    height: 200,\r\n    style: cssRules\r\n  })\r\n\r\n  return $icon\r\n}\r\n\r\nexport default createElement\r\n","import isString from './isString'\r\n\r\nconst isSVG = (str) => {\r\n  const declaration = '(?:<\\\\?xml[^>]*>\\\\s*)?'\r\n  const doctype =\r\n    '(?:<\\\\!doctype svg[^>]*\\\\s*(?:\\\\[?(?:\\\\s*<![^>]*>\\\\s*)*\\\\]?)*[^>]*>\\\\s*)?'\r\n  const content = '<svg[^>]*>[^]*<\\\\/svg>\\\\s*$'\r\n  const svg = `^\\\\s*${declaration}${doctype}${content}\\\\s*$`\r\n  const pattern = new RegExp(svg, 'i')\r\n\r\n  return isString(str) && pattern.test(str)\r\n}\r\n\r\nexport default isSVG\r\n","import isFunction from '../../utils/types/isFunction'\r\nimport trim from '../../utils/lang/trim'\r\nimport createElement from '../../utils/dom/createElement'\r\nimport setAttributes from '../../utils/dom/setAttributes'\r\n\r\nimport icon from '../../utils/icons/icon'\r\n\r\nconst _updateHeading = ($heading, i, options) => {\r\n  const CLS_HEADING = 'outline-heading'\r\n  const hasAnchor = options.hasAnchor || true\r\n  const isAtStart = options.isAtStart || true\r\n  const showCode = options.showCode || false\r\n  const chapterCode = options.chapterCode || ''\r\n  const anchorURL = options.anchorURL || ''\r\n  const anchorLinkFilter = options.anchorLinkFilter || null\r\n  const headingId = `heading-${i}`\r\n  const attrs = {\r\n    id: headingId,\r\n    className: isAtStart ? `${CLS_HEADING} ${CLS_HEADING}_start` : CLS_HEADING,\r\n    'data-id': i\r\n  }\r\n  const text = trim($heading.innerHTML)\r\n  let url\r\n  let $anchor\r\n  let $icon\r\n\r\n  if (showCode) {\r\n    attrs.innerHTML = chapterCode + ' ' + text\r\n    attrs['data-code'] = chapterCode\r\n  }\r\n  setAttributes($heading, attrs)\r\n\r\n  if (!hasAnchor) {\r\n    return false\r\n  }\r\n\r\n  if (anchorURL) {\r\n    url = anchorURL\r\n  } else {\r\n    if (isFunction(anchorLinkFilter)) {\r\n      url = anchorLinkFilter($heading.tagName.toLowerCase(), text, i)\r\n    } else {\r\n      url = `#${headingId}`\r\n    }\r\n  }\r\n\r\n  $icon = icon('hash', { iconSet: 'outline' })\r\n  $anchor = createElement(\r\n    'a',\r\n    {\r\n      id: `anchor-${i}`,\r\n      className: `${CLS_HEADING}__anchor anchor-${i}`,\r\n      href: url,\r\n      target: anchorURL ? '_blank' : 'self',\r\n      'data-id': i\r\n    },\r\n    $icon\r\n  )\r\n  $heading.appendChild($anchor)\r\n}\r\n\r\nexport default _updateHeading\r\n","import createElement from './createElement'\r\n\r\n/**\r\n * 创建 SVG 图标 DOM 元素\r\n * ========================================================================\r\n * @method icon\r\n * @alias createElement\r\n * @see createElement\r\n * @param {String} name\r\n * @param {Object} [options]\r\n * @param {Number|Array} [options.size]\r\n * @param {String} [options.color]\r\n * @param {String} [options.iconSet]\r\n * @returns {HTMLElement}\r\n */\r\nconst icon = (name, options = {}) => {\r\n  return createElement(name, options)\r\n}\r\n\r\nexport default icon\r\n","import isObject from '../types/isObject'\r\nimport isString from '../types/isString'\r\nimport isArray from '../types/isArray'\r\nimport isDOM from '../types/isDOM'\r\nimport setAttributes from './setAttributes'\r\n\r\n/**\r\n * 创建 DOM 节点，并添加属性和子节点\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} tagName - 标签名称\r\n * @param {Object|Array|HTMLElement|DocumentFragment|String} attrs - 属性对象或者子节点\r\n * @param {Array|HTMLElement|DocumentFragment|String} [children] - 子节点数组\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (tagName, attrs, children) => {\r\n  const $fragment = document.createDocumentFragment()\r\n  const $el = document.createElement(tagName)\r\n  const isValidChild = (child) => {\r\n    return isDOM(child) || isString(child)\r\n  }\r\n  const append = (child) => {\r\n    let $child\r\n\r\n    if (!isValidChild(child)) {\r\n      return false\r\n    }\r\n\r\n    if (isDOM(child)) {\r\n      $child = child\r\n    } else if (isString(child)) {\r\n      $child = document.createTextNode(child)\r\n    }\r\n\r\n    $fragment.appendChild($child)\r\n  }\r\n\r\n  if (isObject(attrs)) {\r\n    setAttributes($el, attrs)\r\n  } else if (isArray(attrs) && attrs.every((attr) => isValidChild(attr))) {\r\n    attrs.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else if (isDOM(attrs)) {\r\n    append(attrs)\r\n  } else if (isString(attrs)) {\r\n    append(document.createTextNode(attrs))\r\n  }\r\n\r\n  if (isArray(children)) {\r\n    children.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else {\r\n    append(children)\r\n  }\r\n\r\n  $el.appendChild($fragment)\r\n\r\n  return $el\r\n}\r\n\r\nexport default createElement\r\n","import trim from '../lang/trim'\r\nimport hasClass from './hasClass'\r\n\r\n/**\r\n * 移除 DOM 节点的 className 样式\r\n * ========================================================================\r\n * @method removeClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst removeClass = (el, className) => {\r\n  let allClass = el.className\r\n  let classList\r\n\r\n  if (!allClass || !hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.remove) {\r\n    classList.remove(className)\r\n  } else {\r\n    allClass = trim(allClass.replace(className, ''))\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default removeClass\r\n","import removeClass from '../../utils/dom/removeClass'\r\nimport isEmpty from '../../utils/types/isEmpty'\r\nimport trim from '../../utils/lang/trim'\r\n\r\nconst _removeHeading = ($heading, hasAnchor = true, isAtStart = true) => {\r\n  const CLS_HEADING = 'outline-heading'\r\n  const text = $heading.innerHTML\r\n  const pattern = /^\\d+(\\.?\\d+)*\\s?/gi\r\n  let $anchor\r\n\r\n  $heading.innerHTML = text.replace(pattern, '')\r\n  $heading.removeAttribute('id')\r\n  $heading.removeAttribute('data-id')\r\n\r\n  removeClass($heading, CLS_HEADING)\r\n\r\n  if (!hasAnchor) {\r\n    return false\r\n  }\r\n\r\n  $anchor = $heading.querySelector(`.${CLS_HEADING}__anchor`)\r\n\r\n  if (isAtStart) {\r\n    removeClass($heading, `${CLS_HEADING}_start`)\r\n  }\r\n\r\n  if (isEmpty(trim($heading.className))) {\r\n    $heading.removeAttribute('class')\r\n  }\r\n\r\n  // 存在锚点才移除\r\n  if ($anchor) {\r\n    $heading.removeChild($anchor)\r\n  }\r\n}\r\n\r\nexport default _removeHeading\r\n","import isString from './isString'\r\n/**\r\n * 检测数据是否为空字符串\r\n * ========================================================================\r\n * @method isEmpty\r\n * @param {String} str\r\n * @returns {boolean}\r\n */\r\nconst isEmpty = (str) => {\r\n  return isString(str) && str === ''\r\n}\r\n\r\nexport default isEmpty\r\n","const SYMBOLS = [\r\n  '<symbol id=\"outline-icon-hash\" viewBox=\"0 0 24 24\"><path d=\"M14.216 10l-0.444 4h-3.988l0.444-4zM15.006 2.89l-0.568 5.11h-3.988l0.543-4.89c0.061-0.549-0.335-1.043-0.883-1.104s-1.043 0.335-1.104 0.884l-0.568 5.11h-4.438c-0.552 0-1 0.448-1 1s0.448 1 1 1h4.216l-0.444 4h-3.772c-0.552 0-1 0.448-1 1s0.448 1 1 1h3.549l-0.543 4.89c-0.061 0.549 0.335 1.043 0.883 1.104s1.043-0.335 1.104-0.883l0.569-5.111h3.988l-0.543 4.89c-0.061 0.549 0.335 1.043 0.883 1.104s1.043-0.335 1.104-0.883l0.568-5.111h4.438c0.552 0 1-0.448 1-1s-0.448-1-1-1h-4.216l0.444-4h3.772c0.552 0 1-0.448 1-1s-0.448-1-1-1h-3.549l0.543-4.89c0.061-0.549-0.335-1.043-0.883-1.104s-1.043 0.335-1.104 0.883z\"></path></symbol>'\r\n]\r\n\r\nexport default SYMBOLS\r\n","import isString from '../utils/types/isString'\r\nimport isFunction from '../utils/types/isFunction'\r\nimport isElement from '../utils/types/isElement'\r\n\r\nimport cloneDeep from '../utils/lang/cloneDeep'\r\nimport timeSlice from '../utils/lang/timeSlice'\r\nimport later from '../utils/lang/later'\r\n\r\nimport scrollTo from '../utils/dom/scrollTo'\r\nimport getScrollElement from '../utils/dom/getScrollElement'\r\nimport offsetTop from '../utils/dom/offsetTop'\r\n\r\nimport on from '../utils/event/on'\r\nimport off from '../utils/event/off'\r\nimport stop from '../utils/event/stop'\r\n\r\nimport paint from '../utils/icons/paint'\r\n\r\nimport getChapters from '../chapters/getChapters'\r\n\r\nimport Component from '../base/component'\r\n\r\nimport _updateHeading from './utils/_updateHeading'\r\nimport _removeHeading from './utils/_removeHeading'\r\n\r\nimport SYMBOLS from './symbols'\r\n\r\nclass Anchors extends Component {\r\n  constructor(options) {\r\n    super()\r\n\r\n    this.name = 'anchors'\r\n    this._default()\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  _default() {\r\n    this.attrs = cloneDeep(Anchors.DEFAULTS)\r\n\r\n    this.$articleElement = null\r\n    this.$scrollElement = null\r\n    this.$headings = []\r\n\r\n    return this\r\n  }\r\n\r\n  initialize(options) {\r\n    let created\r\n    let scrollElement\r\n    let $articleElement\r\n    let articleElement\r\n\r\n    this.attr(options)\r\n\r\n    articleElement = this.attr('articleElement')\r\n    scrollElement = this.attr('scrollElement')\r\n    created = this.attr('created')\r\n\r\n    if (isString(articleElement)) {\r\n      $articleElement = document.querySelector(articleElement)\r\n    } else if (isElement(articleElement)) {\r\n      $articleElement = articleElement\r\n    }\r\n\r\n    if (!$articleElement) {\r\n      return this\r\n    }\r\n\r\n    this.$articleElement = $articleElement\r\n    this.$scrollElement = getScrollElement(scrollElement)\r\n    this.$headings = this.getHeadings()\r\n\r\n    if (this.$headings.length < 1) {\r\n      return this\r\n    }\r\n\r\n    if (isFunction(created)) {\r\n      created.call(this)\r\n    }\r\n\r\n    this.render().addListeners()\r\n\r\n    return this\r\n  }\r\n\r\n  getHeadings() {\r\n    const $articleElement = this.$articleElement\r\n    const selector = this.attr('selector')\r\n\r\n    return [...$articleElement.querySelectorAll(selector)]\r\n  }\r\n\r\n  count() {\r\n    return this.getHeadings().length\r\n  }\r\n\r\n  render() {\r\n    const articleElement = this.attr('articleElement')\r\n    const selector = this.attr('selector')\r\n    const showCode = this.attr('showCode')\r\n    const chapterTextFilter = this.attr('chapterTextFilter')\r\n    const mounted = this.attr('mounted')\r\n    const chapters = getChapters({\r\n      articleElement,\r\n      selector,\r\n      showCode,\r\n      chapterTextFilter\r\n    })\r\n\r\n    paint(SYMBOLS)\r\n\r\n    this._paint(chapters)\r\n\r\n    if (isFunction(mounted)) {\r\n      mounted.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  erase() {\r\n    this._remove()\r\n\r\n    return this\r\n  }\r\n\r\n  _paint(chapters) {\r\n    const LIMIT = 400\r\n    const hasAnchor = this.attr('hasAnchor')\r\n    const isAtStart = this.attr('isAtStart')\r\n    const showCode = this.attr('showCode')\r\n    const anchorURL = this.attr('anchorURL')\r\n    const anchorLinkFilter = this.attr('anchorLinkFilter')\r\n    const count = this.count()\r\n    const $headings = [...this.$headings]\r\n    const update = (headings, group) => {\r\n      headings.forEach(($heading, i) => {\r\n        const id = i + group * LIMIT\r\n        const chapterCode = chapters[id].code\r\n        _updateHeading($heading, id, {\r\n          hasAnchor,\r\n          isAtStart,\r\n          showCode,\r\n          chapterCode,\r\n          anchorURL,\r\n          anchorLinkFilter\r\n        })\r\n      })\r\n    }\r\n    let groupIndex = -1\r\n\r\n    // 针对超长的文章，进行 timeSlice 处理\r\n    if (count > LIMIT) {\r\n      groupIndex += 1\r\n      // 同步绘制 Limit 以内的标题链接（可以确保 50ms 完成绘制）\r\n      update($headings.splice(0, LIMIT), 0)\r\n      // 采用 timeSlice 处理机制绘制剩余的标题\r\n      while ($headings.length > 0) {\r\n        const once = $headings.splice(0, LIMIT)\r\n        timeSlice(\r\n          () => {\r\n            update(once, (groupIndex += 1))\r\n          },\r\n          () => {\r\n            this.$emit('anchors:all:paint')\r\n          }\r\n        )\r\n      }\r\n    } else {\r\n      update($headings, 0)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  _remove() {\r\n    const hasAnchor = this.attr('hasAnchor')\r\n    const isAtStart = this.attr('isAtStart')\r\n    const $headings = this.$headings\r\n\r\n    $headings.forEach(($heading) => {\r\n      _removeHeading($heading, hasAnchor, isAtStart)\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  refresh(chapters) {\r\n    const articleElement = this.attr('articleElement')\r\n    const selector = this.attr('selector')\r\n    const showCode = this.attr('showCode')\r\n    const chapterTextFilter = this.attr('chapterTextFilter')\r\n\r\n    this.$headings = this.getHeadings()\r\n\r\n    this.erase()._paint(\r\n      chapters ||\r\n        getChapters({\r\n          articleElement,\r\n          selector,\r\n          showCode,\r\n          chapterTextFilter\r\n        })\r\n    )\r\n\r\n    return this\r\n  }\r\n\r\n  scrollTo(top, after) {\r\n    const el = this.$scrollElement\r\n\r\n    scrollTo(el, top, after)\r\n\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    const beforeDestroy = this.attr('beforeDestroy')\r\n    const afterDestroy = this.attr('afterDestroy')\r\n\r\n    if (isFunction(beforeDestroy)) {\r\n      beforeDestroy.call(this)\r\n    }\r\n\r\n    this.removeListeners()._remove()._default()\r\n\r\n    if (isFunction(afterDestroy)) {\r\n      afterDestroy.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  onAnchorTrigger(evt) {\r\n    const anchorURL = this.attr('anchorURL')\r\n    const afterScroll = this.attr('afterScroll')\r\n    const stickyHeight = this.attr('stickyHeight')\r\n    const $anchor = evt.delegateTarget\r\n    const $heading = $anchor.parentNode\r\n    const top = offsetTop($heading) - (stickyHeight + 10)\r\n    const $scrollElement = this.$scrollElement\r\n    const min = 0\r\n    const max = $scrollElement.scrollHeight - $scrollElement.clientHeight\r\n    const after = () => {\r\n      if (isFunction(afterScroll)) {\r\n        afterScroll.call(this, 'anchor')\r\n      }\r\n\r\n      later(() => {\r\n        this.$emit('toolbar:update', {\r\n          top,\r\n          min,\r\n          max\r\n        })\r\n      })\r\n    }\r\n\r\n    this.scrollTo(top, after)\r\n\r\n    if (!anchorURL) {\r\n      stop(evt)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  onRefresh(chapters) {\r\n    this.refresh(chapters)\r\n\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    const $articleElement = this.$articleElement\r\n\r\n    if (this.count() < 1) {\r\n      return this\r\n    }\r\n\r\n    on(\r\n      $articleElement,\r\n      '.outline-heading__anchor',\r\n      'click',\r\n      this.onAnchorTrigger,\r\n      this,\r\n      true\r\n    )\r\n\r\n    this.$on('anchors:refresh', this.onRefresh)\r\n\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    const $articleElement = this.$articleElement\r\n\r\n    if (this.count() < 1) {\r\n      return this\r\n    }\r\n\r\n    off($articleElement, 'click', this.onAnchorTrigger)\r\n    this.$off('anchors:refresh', this.onRefresh)\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nAnchors.DEFAULTS = (() => {\r\n  const OPTIONS = {\r\n    scrollElement: 'html,body',\r\n    articleElement: '#article',\r\n    selector: 'h1,h2,h3,h4,h5,h6',\r\n    stickyHeight: 0,\r\n    anchorURL: '',\r\n    hasAnchor: true,\r\n    isAtStart: true,\r\n    showCode: false,\r\n    created: null,\r\n    mounted: null,\r\n    afterScroll: null,\r\n    beforeDestroy: null,\r\n    afterDestroy: null,\r\n    chapterTextFilter: null,\r\n    anchorLinkFilter: null\r\n  }\r\n\r\n  return cloneDeep(OPTIONS)\r\n})()\r\n\r\nexport default Anchors\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\n\r\n/**\r\n * 通过给的 scrollElement 参数，获取滚动 DOM 元素\r\n * ========================================================================\r\n * @method getScrollElement\r\n * @param {String|HTMLElement} scrollElement\r\n * @returns {Element}\r\n * @private\r\n */\r\nconst getScrollElement = (scrollElement = null) => {\r\n  let $rootElements\r\n  let $scrollElement\r\n\r\n  if (!scrollElement) {\r\n    $rootElements = document.querySelectorAll('html,body')\r\n    $scrollElement =\r\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\r\n        ? $rootElements[0]\r\n        : $rootElements[1]\r\n  } else {\r\n    if (isString(scrollElement)) {\r\n      $scrollElement = document.querySelector(scrollElement)\r\n    } else if (isElement(scrollElement)) {\r\n      $scrollElement = scrollElement\r\n    }\r\n  }\r\n\r\n  return $scrollElement\r\n}\r\n\r\nexport default getScrollElement\r\n","/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stop\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stop = function (evt) {\r\n  evt.stopPropagation()\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default stop\r\n"],"names":["isString","str","toString","val","Object","prototype","apply","isFunction","isObject","o","isElement","nodeName","tagName","nodeType","isArray","Array","cloneDeep","obj","clone","from","assign","keys","forEach","key","later","fn","delay","setTimeout","queue","isHandling","done","runIdle","idleDeadline","timeRemaining","length","shift","requestIdleCallback","window","cb","start","Date","now","didTimeout","Math","max","cancelIdleCallback","id","clearTimeout","timeSlice","afterComplete","push","easeInQuad","x","scrollTo","scrollElement","top","afterStop","$scrollElement","_getScrollElement","$rootElements","document","querySelector","querySelectorAll","scrollTop","step","distance","MAX_HEIGHT","scrollHeight","MAX_TOP","stop","play","requestAnimationFrame","offsetTop","el","offsetParent","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","CAPTURE_EVENTS","_off","type","capture","indexOf","_delegateListener","listeners","_listeners","index","listener","i","handler","splice","_delete","removeEventListener","purgeElement","recurse","$element","$children","childNodes","getListeners","filter","arguments","$child","off","on","data","context","once","evt","target","getTarget","delegateTarget","closest","ctx","includeCTX","startsWith","overrideContext","call","addEventListener","SYMBOLS","getSymbols","name","iconSet","getSymbol","patternName","patternSet","find","symbol","fullName","exec","_maybeArrayLike","_toConsumableArray","paint","$body","body","$icons","symbols","add","innerHTML","join","createElement","insertBefore","firstChild","trim","getChaptersByHeadings","headings","showCode","chapterTextFilter","pattern","chapters","previous","level","text","heading","headingLevel","current","parseInt","pid","_getChapterParentIdByDiffer","differ","rel","groups","group","JSON","stringify","code","String","c","subjects","_getChaptersWithCode","getChapters","options","articleElement","isTreeStructured","$article","$headings","toTree","list","nodeKey","parentKey","map","roots","item","children","node","hasOwn","prop","hasOwnProperty","_subscribers","_hasDirectSubscribersFor","topic","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","async","execute","subscriber","message","callback","deliver","guid","uuid","prefix","_removeSubscriber","token","subject","execution","j","_removeSubscriberByToken","Component","constructor","this","attrs","initialize","attr","render","addListeners","value","origin","source","extend","refresh","destroy","removeListeners","reload","$emit","event","publish","$on","subscribe","$off","unsubscribe","isDOM","isHTMLCollection","fragment","isTextNode","hasClass","className","RegExp","allClass","classList","contains","setAttribute","toLowerCase","style","cssText","addClass","_classList","split","innerText","setAttributes","ICON","size","color","width","height","defaultRules","cssRules","$icon","$svg","binds","svg","test","isSVG","xmlns","class","_updateHeading","$heading","CLS_HEADING","hasAnchor","isAtStart","chapterCode","anchorURL","anchorLinkFilter","headingId","url","$anchor","icon","$fragment","createDocumentFragment","$el","isValidChild","child","append","createTextNode","appendChild","every","href","removeClass","remove","_removeHeading","removeAttribute","removeChild","Anchors","super","_default","DEFAULTS","$articleElement","created","getScrollElement","getHeadings","count","mounted","_paint","erase","_remove","LIMIT","update","groupIndex","after","beforeDestroy","afterDestroy","onAnchorTrigger","afterScroll","stickyHeight","clientHeight","min","stopPropagation","preventDefault","onRefresh"],"mappings":"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"}