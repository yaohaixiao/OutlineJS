{"version":3,"file":"navigator.min.js","sources":["../utils/types/isString.js","../utils/lang/toString.js","../utils/types/isFunction.js","../utils/types/isObject.js","../utils/types/isElement.js","../utils/lang/later.js","../utils/types/isArray.js","../utils/lang/cloneDeep.js","../utils/event/enum.js","../utils/event/_off.js","../utils/event/_delete.js","../utils/event/purgeElement.js","../utils/event/getListeners.js","../utils/event/off.js","../utils/event/at.js","../utils/dom/matches.js","../utils/dom/getParentOrHost.js","../utils/event/on.js","../utils/event/getTarget.js","../utils/dom/resolveTextNode.js","../utils/dom/closest.js","../utils/types/isDOM.js","../utils/types/isHTMLCollection.js","../utils/types/isFragment.js","../utils/types/isTextNode.js","../utils/lang/hasOwn.js","../utils/dom/hasClass.js","../utils/dom/addClass.js","../utils/dom/setAttributes.js","../utils/dom/setAttribute.js","../utils/dom/createElement.js","../utils/lang/easeInQuad.js","../utils/dom/scrollTo.js","utils/_getScrollElement.js","../utils/dom/removeClass.js","../utils/lang/trim.js","../utils/dom/offsetTop.js","../utils/dom/getStyle.js","../utils/dom/setProperty.js","../utils/observer/_subscribers.js","../utils/observer/_hasDirectSubscribersFor.js","../utils/observer/has.js","../utils/observer/_hasSubscribers.js","../utils/observer/emit.js","../utils/types/isTypedArray.js","../utils/lang/guid.js","../utils/observer/_removeSubscriber.js","../utils/observer/off.js","../utils/observer/_removeSubscriberByToken.js","../base/component.js","../utils/lang/extend.js","../utils/observer/on.js","../utils/lang/timeSlice.js","utils/_paintChapters.js","navigator.js","../utils/dom/getScrollElement.js","../utils/dom/inBounding.js","../utils/dom/intersection.js","../utils/event/stop.js"],"sourcesContent":["/**\r\n * 检测数据是否为 String 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} str\r\n * @returns {boolean}\r\n */\r\nconst isString = (str) => {\r\n  return typeof str === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * Object 对象原型上的 toString 方法\r\n * ========================================================================\r\n * @method toString\r\n * @param {*} val\r\n * @returns {string}\r\n */\r\nconst toString = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default toString\r\n","import toString from '../../utils/lang/toString'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return typeof val === 'function' || toString(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","import toString from '../lang/toString'\r\nimport isFunction from './isFunction'\r\n\r\n/**\r\n * 检测数据是否为 Object 类型\r\n * ========================================================================\r\n * @method isObject\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isObject = (o) => {\r\n  return (\r\n    (toString(o) === '[object Object]' ||\r\n      typeof o === 'object' ||\r\n      isFunction(o)) &&\r\n    o !== null\r\n  )\r\n}\r\n\r\nexport default isObject\r\n","import isObject from './isObject'\r\n\r\n/**\r\n * 检测数据是否为 HTMLElement DOM 节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isElement = (o) => {\r\n  return !!(isObject(o) && o.nodeName && o.tagName && o.nodeType === 1)\r\n}\r\n\r\nexport default isElement\r\n","import isFunction from '../../utils/types/isFunction'\r\n\r\n/**\r\n * later - 延迟执行方法\r\n * ========================================================================\r\n * @method later\r\n * @param {Function} fn\r\n * @param {Number} [delay]\r\n * @returns {number|boolean}\r\n */\r\nconst later = (fn, delay = 300) => {\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  return setTimeout(() => {\r\n    fn()\r\n  }, delay)\r\n}\r\n\r\nexport default later\r\n","import toString from '../../utils/lang/toString'\r\n\r\n/**\r\n * 检测数据是否为 Array 类型\r\n * ========================================================================\r\n * @method isArray\r\n * @param {*} o\r\n * @returns {boolean}\r\n */\r\nconst isArray = (o) => {\r\n  if (Array.isArray) {\r\n    return Array.isArray(o)\r\n  } else {\r\n    return toString(o) === '[object Array]'\r\n  }\r\n}\r\n\r\nexport default isArray\r\n","import isObject from '../../utils/types/isObject'\r\nimport isArray from '../../utils/types/isArray'\r\n\r\n/**\r\n * 深拷贝对象函数\r\n * ========================================================================\r\n * @methods cloneDeep\r\n * @param {Object} obj - 深拷贝的对象\r\n * @returns {Array|Object|*}\r\n *\r\n * @example\r\n * const arr = cloneDeep([2,3,4,6])\r\n * => [2,3,4,6]\r\n */\r\nconst cloneDeep = (obj) => {\r\n  let clone = {}\r\n\r\n  if (obj === null) {\r\n    return null\r\n  }\r\n\r\n  if (isArray(obj)) {\r\n    clone = Array.from(obj)\r\n  } else {\r\n    clone = Object.assign({}, obj)\r\n    Object.keys(clone).forEach((key) => {\r\n      return (clone[key] = isObject(obj[key]) ? cloneDeep(obj[key]) : obj[key])\r\n    })\r\n  }\r\n\r\n  return clone\r\n}\r\n\r\nexport default cloneDeep\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from '../../utils/types/isString'\r\nimport isElement from '../../utils/types/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import isString from '../../utils/types/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from '../types/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement|Object} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    purgeElement(el, type)\r\n    return false\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","import isFunction from '../../utils/types/isFunction'\r\nimport off from './off'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定事件\r\n * ========================================================================\r\n * @method at\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst at = (el, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n  const listener = function (evt) {\r\n    let overrideContext = context || el\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    // 仅触发一次\r\n    /* istanbul ignore else */\r\n    if (once === true) {\r\n      off(el, type, listener)\r\n    }\r\n\r\n    fn.call(overrideContext, evt, data)\r\n  }\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default at\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","import closest from '../../utils/dom/closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （可选） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el) {\r\n    return false\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import resolveTextNode from '../../utils/dom/resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector.startsWith('>')\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\nconst isDOM = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import toString from '../../utils/lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isHTMLCollection = (el) => {\r\n  return !!(isObject(el) && toString(el) === '[object NodeList]')\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import toString from '../../utils/lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isFragment = (fragment) => {\r\n  return !!(\r\n    isObject(fragment) && toString(fragment) === '[object DocumentFragment]'\r\n  )\r\n}\r\n\r\nexport default isFragment\r\n","import toString from '../../utils/lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isTextNode = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (toString(el) === '[object Text]' || (el.tagName && el.nodeType === 3))\r\n  )\r\n}\r\n\r\nexport default isTextNode\r\n","/**\r\n * 检测对象自身属性中是否具有指定的属性。\r\n * ========================================================================\r\n * @method hasOwn\r\n * @param {Object} obj - （必须）检测的目标对象\r\n * @param {String} prop - （必须）属性名\r\n * @returns {Boolean}\r\n */\r\nconst hasOwn = (obj, prop) => {\r\n  const hasOwnProperty = Object.prototype.hasOwnProperty\r\n  return obj && hasOwnProperty.call(obj, prop)\r\n}\r\n\r\nexport default hasOwn\r\n","import isElement from '../types/isElement'\r\n/**\r\n * 检测 DOM 节点是否包含名为 className 的样式\r\n * ========================================================================\r\n * @method hasClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst hasClass = (el, className) => {\r\n  const pattern = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\r\n  let allClass\r\n  let classList\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  allClass = el.className\r\n\r\n  if (!allClass) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList && classList.contains) {\r\n    return el.classList.contains(className)\r\n  }\r\n\r\n  return !!pattern.exec(allClass)\r\n}\r\n\r\nexport default hasClass\r\n","import hasClass from './hasClass'\r\n\r\n/**\r\n * 给 DOM 节点添加名为 className 的样式\r\n * ========================================================================\r\n * @method addClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst addClass = (el, className) => {\r\n  let classList\r\n  let allClass\r\n\r\n  if (hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.add) {\r\n    if (className.indexOf(' ') > -1) {\r\n      className.split(' ').forEach((name) => {\r\n        classList.add(name)\r\n      })\r\n    } else {\r\n      classList.add(className)\r\n    }\r\n  } else {\r\n    allClass = el.className\r\n    allClass += allClass.length > 0 ? ' ' + className : className\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default addClass\r\n","import isObject from '../types/isObject'\r\nimport hasOwn from '../lang/hasOwn'\r\nimport setAttribute from './setAttribute'\r\n\r\nconst setAttributes = (el, attrs) => {\r\n  if (!el || !isObject(attrs)) {\r\n    return false\r\n  }\r\n\r\n  Object.keys(attrs).forEach((attr) => {\r\n    const value = attrs[attr]\r\n    if (hasOwn(attrs, attr)) {\r\n      setAttribute(el, attr, value)\r\n    }\r\n  })\r\n}\r\n\r\nexport default setAttributes\r\n","import addClass from './addClass.js'\r\n\r\n/**\r\n * 给 DOM 节点设置属性/值\r\n * ========================================================================\r\n * @method setAttribute\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} attr - 属性名称\r\n * @param {String|Number|Boolean} value - 属性值\r\n */\r\nconst setAttribute = (el, attr, value) => {\r\n  let tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'style':\r\n      el.style.cssText = value\r\n      break\r\n    case 'value':\r\n      if (tagName === 'input' || tagName === 'textarea') {\r\n        el.value = value\r\n      } else {\r\n        el.setAttribute(attr, value)\r\n      }\r\n      break\r\n    case 'htmlFor':\r\n      el.setAttribute('for', value)\r\n      break\r\n    case 'className':\r\n      addClass(el, value)\r\n      break\r\n    case 'innerHTML':\r\n      el.innerHTML = value\r\n      break\r\n    case 'innerText':\r\n      el.innerText = value\r\n      break\r\n    default:\r\n      el.setAttribute(attr, value)\r\n      break\r\n  }\r\n}\r\n\r\nexport default setAttribute\r\n","import isObject from '../types/isObject'\r\nimport isString from '../types/isString'\r\nimport isArray from '../types/isArray'\r\nimport isDOM from '../types/isDOM'\r\nimport setAttributes from './setAttributes'\r\n\r\n/**\r\n * 创建 DOM 节点，并添加属性和子节点\r\n * ========================================================================\r\n * @method createElement\r\n * @param {String} tagName - 标签名称\r\n * @param {Object|Array|HTMLElement|DocumentFragment|String} attrs - 属性对象或者子节点\r\n * @param {Array|HTMLElement|DocumentFragment|String} [children] - 子节点数组\r\n * @returns {HTMLElement}\r\n */\r\nconst createElement = (tagName, attrs, children) => {\r\n  const $fragment = document.createDocumentFragment()\r\n  const $el = document.createElement(tagName)\r\n  const isValidChild = (child) => {\r\n    return isDOM(child) || isString(child)\r\n  }\r\n  const append = (child) => {\r\n    let $child\r\n\r\n    if (!isValidChild(child)) {\r\n      return false\r\n    }\r\n\r\n    if (isDOM(child)) {\r\n      $child = child\r\n    } else if (isString(child)) {\r\n      $child = document.createTextNode(child)\r\n    }\r\n\r\n    $fragment.appendChild($child)\r\n  }\r\n\r\n  if (isObject(attrs)) {\r\n    setAttributes($el, attrs)\r\n  } else if (isArray(attrs) && attrs.every((attr) => isValidChild(attr))) {\r\n    attrs.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else if (isDOM(attrs)) {\r\n    append(attrs)\r\n  } else if (isString(attrs)) {\r\n    append(document.createTextNode(attrs))\r\n  }\r\n\r\n  if (isArray(children)) {\r\n    children.forEach((child) => {\r\n      append(child)\r\n    })\r\n  } else {\r\n    append(children)\r\n  }\r\n\r\n  $el.appendChild($fragment)\r\n\r\n  return $el\r\n}\r\n\r\nexport default createElement\r\n","/**\r\n * 返回给定值的平方值\r\n * ========================================================================\r\n * @method easeInQuad\r\n * @param {Number} x\r\n * @returns {number}\r\n */\r\nconst easeInQuad = (x) => {\r\n  return x * x\r\n}\r\n\r\nexport default easeInQuad\r\n","import easeInQuad from '../lang/easeInQuad'\r\nimport isFunction from '../types/isFunction'\r\nimport _getScrollElement from '../../navigator/utils/_getScrollElement'\r\n\r\n/**\r\n * 指定 rootElement DOM 节点滚动到指定 top 位置\r\n * ========================================================================\r\n * @method scrollTo\r\n * @param {HTMLElement|Object} [scrollElement] - （必须）要滚动的 DOM 节点\r\n * @param {Number} top - （必须）滚动的 scrollTop 数值\r\n * @param {Function} [afterStop] - （可选）滚动完成的回调函数\r\n */\r\nconst scrollTo = (scrollElement, top, afterStop) => {\r\n  const $scrollElement = _getScrollElement(scrollElement)\r\n  let scrollTop = $scrollElement.scrollTop\r\n  let step = 0\r\n  const distance = top - scrollTop\r\n  const MAX_HEIGHT = $scrollElement.scrollHeight\r\n  const MAX_TOP = top - MAX_HEIGHT <= 0 ? top : MAX_HEIGHT\r\n  const stop = (top) => {\r\n    if (isFunction(afterStop)) {\r\n      afterStop(top)\r\n    }\r\n\r\n    return false\r\n  }\r\n  const play = () => {\r\n    step += 1\r\n\r\n    // 向上滚动\r\n    if (distance < 0) {\r\n      scrollTop -= easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop <= top) {\r\n        $scrollElement.scrollTop = top\r\n        return stop(top)\r\n      }\r\n    } else {\r\n      scrollTop += easeInQuad(step)\r\n      $scrollElement.scrollTop = scrollTop\r\n\r\n      if (scrollTop >= MAX_TOP) {\r\n        $scrollElement.scrollTop = MAX_TOP\r\n        return stop(MAX_TOP)\r\n      }\r\n    }\r\n\r\n    // eslint-disable-next-line compat/compat\r\n    requestAnimationFrame(play)\r\n  }\r\n\r\n  // eslint-disable-next-line compat/compat\r\n  requestAnimationFrame(play)\r\n}\r\n\r\nexport default scrollTo\r\n","import isString from '../../utils/types/isString'\r\nimport isElement from '../../utils/types/isElement'\r\n\r\n/**\r\n * 通过给的 scrollElement 参数，获取滚动 DOM 元素\r\n * ========================================================================\r\n * @method _getScrollElement\r\n * @param {String|HTMLElement} scrollElement\r\n * @returns {Element}\r\n * @private\r\n */\r\nconst _getScrollElement = (scrollElement = null) => {\r\n  let $rootElements\r\n  let $scrollElement\r\n\r\n  if (!scrollElement) {\r\n    $rootElements = document.querySelectorAll('html,body')\r\n    $scrollElement =\r\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\r\n        ? $rootElements[0]\r\n        : $rootElements[1]\r\n  } else {\r\n    if (isString(scrollElement)) {\r\n      $scrollElement = document.querySelector(scrollElement)\r\n    } else if (isElement(scrollElement)) {\r\n      $scrollElement = scrollElement\r\n    }\r\n  }\r\n\r\n  return $scrollElement\r\n}\r\n\r\nexport default _getScrollElement\r\n","import trim from '../lang/trim'\r\nimport hasClass from './hasClass'\r\n\r\n/**\r\n * 移除 DOM 节点的 className 样式\r\n * ========================================================================\r\n * @method removeClass\r\n * @param {HTMLElement} el - DOM 节点\r\n * @param {String} className - 样式名称\r\n * @returns {Boolean}\r\n */\r\nconst removeClass = (el, className) => {\r\n  let allClass = el.className\r\n  let classList\r\n\r\n  if (!allClass || !hasClass(el, className)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.remove) {\r\n    classList.remove(className)\r\n  } else {\r\n    allClass = trim(allClass.replace(className, ''))\r\n    el.className = allClass\r\n  }\r\n}\r\n\r\nexport default removeClass\r\n","import isString from '../../utils/types/isString'\r\n\r\n/**\r\n * 清楚字符串起始位置所有的空格\r\n * ========================================================================\r\n * @method trim\r\n * @param {string} str\r\n * @returns {string|Boolean}\r\n */\r\nconst trim = (str) => {\r\n  if (!isString(str)) {\r\n    return false\r\n  }\r\n  return str.replace(/(^\\s+)|(\\s+$)/g, '')\r\n}\r\n\r\nexport default trim\r\n","/**\r\n * 获取 DOM 节点相对于窗口的 left （纵坐标）值\r\n * ========================================================================\r\n * @method offsetTop\r\n * @param {HTMLElement} el - DOM 节点\r\n * @returns {Number}\r\n */\r\nconst offsetTop = (el) => {\r\n  let top = el.offsetTop\r\n\r\n  if (el.offsetParent !== null) {\r\n    top += offsetTop(el.offsetParent)\r\n  }\r\n\r\n  return top\r\n}\r\n\r\nexport default offsetTop\r\n","/**\r\n * 获取HTML元素的某个CSS样式值\r\n * ====================================================\r\n * @param el\r\n * @param ruleName\r\n * @returns {*}\r\n */\r\nconst getStyle = (el, ruleName) => {\r\n  return getComputedStyle(el)[ruleName]\r\n}\r\n\r\nexport default getStyle\r\n","const setProperty = (prop, value) => {\r\n  const documentElement = document.documentElement\r\n  documentElement.style.setProperty(prop, value)\r\n}\r\n\r\nexport default setProperty\r\n","/**\r\n * 存储订阅者（主题和处理器的）私有对象\r\n * ========================================================================\r\n * @type {{}}\r\n * @private\r\n */\r\nconst _subscribers = {}\r\n\r\nexport default _subscribers\r\n","import hasOwn from '../../utils/lang/hasOwn'\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\r\n * ========================================================================\r\n * @method _hasDirectSubscribersFor\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasDirectSubscribersFor = (topic) => {\r\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\r\n}\r\n\r\nexport default _hasDirectSubscribersFor\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _hasSubscribers from './_hasSubscribers'\r\n\r\n/**\r\n * 判断是否存在包含 topic 指定的订阅者信息\r\n * ========================================================================\r\n * @method has\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\r\n * @returns {Boolean}\r\n */\r\nconst has = (topic, isDirect = true) => {\r\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\r\n}\r\n\r\nexport default has\r\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\n\r\n/**\r\n * 判断是否存在包含给定 topic 相关的订阅者信息\r\n * ========================================================================\r\n * @method _hasSubscribers\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _hasSubscribers = (topic) => {\r\n  let found = _hasDirectSubscribersFor(topic)\r\n  let position = topic.lastIndexOf('.')\r\n\r\n  while (!found && position !== -1) {\r\n    topic = topic.substring(0, position)\r\n    position = topic.lastIndexOf('.')\r\n    found = _hasDirectSubscribersFor(topic)\r\n  }\r\n\r\n  return found\r\n}\r\n\r\nexport default _hasSubscribers\r\n","import isTypedArray from '../../utils/types/isTypedArray'\r\nimport has from './has'\r\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * （异步）发布订阅主题信息\r\n * ========================================================================\r\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\r\n * ========================================================================\r\n * @method emit\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Object} [data] - （可选）数据对象\r\n * @param {Boolean} [async] - (可选) 是否异步发布\r\n */\r\nconst emit = (topic, data, async = true) => {\r\n  const execute = (topic) => {\r\n    if (!_hasDirectSubscribersFor(topic)) {\r\n      return false\r\n    }\r\n\r\n    _subscribers[topic].forEach((subscriber) => {\r\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\r\n      // 采用 toString() 方法转化为普通（JSON）字符串\r\n      const message = isTypedArray(data) ? data.toString() : data\r\n\r\n      subscriber.callback.call(subscriber.context || subscriber, message)\r\n    })\r\n  }\r\n  const deliver = () => {\r\n    let subscriber = topic\r\n    let position = topic.lastIndexOf('.')\r\n\r\n    while (position !== -1) {\r\n      subscriber = subscriber.substring(0, position)\r\n      position = subscriber.lastIndexOf('.')\r\n\r\n      execute(subscriber)\r\n    }\r\n\r\n    // 执行 topic 对应的处理器\r\n    execute(topic)\r\n    // 执行特殊 topic：'*'（监听全部消息的发布）\r\n    execute('*')\r\n  }\r\n\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (async) {\r\n    setTimeout(deliver, 10)\r\n  } else {\r\n    deliver()\r\n  }\r\n}\r\n\r\nexport default emit\r\n","import toString from '../../utils/lang/toString'\r\n/**\r\n * 判断检测数据是否为 Typed Arrays 类型的数据\r\n * ========================================================================\r\n * @param {*} val\r\n * @returns {boolean}\r\n */\r\nconst isTypedArray = (val) => {\r\n  const TYPES = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]',\r\n    '[object BigInt64Array]',\r\n    '[object BigUint64Array]'\r\n  ]\r\n\r\n  return TYPES.indexOf(toString(val)) > -1\r\n}\r\n\r\nexport default isTypedArray\r\n","/**\r\n * 生成唯一 id 字符串的函数\r\n * ========================================================================\r\n * @method guid\r\n * @param {String} [prefix] - 生成 id 的前缀字符串\r\n * @return {String} 返回一个表示唯一 id 的字符串\r\n */\r\nconst guid = (() => {\r\n  let uuid = 0\r\n\r\n  return (prefix) => {\r\n    uuid += 1\r\n\r\n    return prefix ? prefix + '-' + uuid : 'guid-' + uuid\r\n  }\r\n})()\r\n\r\nexport default guid\r\n","import hasOwn from '../../utils/lang/hasOwn'\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * 删除与给定 topic 相同的订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscriber\r\n * @param {String} topic - （必须）订阅主题字符串\r\n * @returns {Boolean}\r\n */\r\nconst _removeSubscriber = (topic) => {\r\n  if (!hasOwn(_subscribers, topic)) {\r\n    return false\r\n  }\r\n\r\n  delete _subscribers[topic]\r\n}\r\n\r\nexport default _removeSubscriber\r\n","import has from './has'\r\nimport _removeSubscriber from './_removeSubscriber'\r\nimport _removeSubscriberByToken from './_removeSubscriberByToken'\r\n\r\n/**\r\n * 取消订阅主题\r\n * ========================================================================\r\n * @method off\r\n * @param {String} topic - （必须）订阅的主题\r\n * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\r\n */\r\nconst off = (topic, token) => {\r\n  if (!has(topic)) {\r\n    return false\r\n  }\r\n\r\n  if (token) {\r\n    _removeSubscriberByToken(token)\r\n  } else {\r\n    _removeSubscriber(topic)\r\n  }\r\n}\r\n\r\nexport default off\r\n","import _subscribers from './_subscribers'\r\nimport _removeSubscriber from './_removeSubscriber'\r\n\r\n/**\r\n * 通过订阅者 token 值删除订阅者信息\r\n * ========================================================================\r\n * @method _removeSubscriberByToken\r\n * @param {String} token - 订阅者 token 字符串\r\n * @returns {boolean}\r\n * @private\r\n */\r\nconst _removeSubscriberByToken = (token) => {\r\n  const keys = Object.keys(_subscribers)\r\n  let index = -1\r\n\r\n  if (!token || keys.length < 1) {\r\n    return false\r\n  }\r\n\r\n  keys.forEach((subject) => {\r\n    const subscriber = _subscribers[subject]\r\n    let topic\r\n\r\n    subscriber.forEach((execution, j) => {\r\n      if (execution.callback === token || execution.token === token) {\r\n        topic = execution.topic\r\n        subscriber.splice(index, j)\r\n      }\r\n    })\r\n\r\n    /* istanbul ignore else */\r\n    if (subscriber.length < 1) {\r\n      _removeSubscriber(topic)\r\n    }\r\n  })\r\n}\r\n\r\nexport default _removeSubscriberByToken\r\n","import isString from '../utils/types/isString'\r\nimport isObject from '../utils/types/isObject'\r\n\r\nimport extend from '../utils/lang/extend'\r\nimport hasOwn from '../utils/lang/hasOwn'\r\n\r\nimport publish from '../utils/observer/emit'\r\nimport subscribe from '../utils/observer/on'\r\nimport unsubscribe from '../utils/observer/off'\r\n\r\nclass Component {\r\n  constructor(options) {\r\n    this.name = 'component'\r\n    this.attrs = {}\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  initialize(options) {\r\n    this.attr(options).render().addListeners()\r\n    return this\r\n  }\r\n\r\n  attr(prop, value) {\r\n    const attrs = this.attrs\r\n\r\n    if (isString(prop)) {\r\n      // 只能扩展 attrs 中已有的属性\r\n      if (value && hasOwn(attrs, prop)) {\r\n        // 更新单个配置信息\r\n        attrs[prop] = value\r\n        return this\r\n      }\r\n\r\n      // 只传递 prop 参数，则返回对应的属性值\r\n      return attrs[prop]\r\n    } else if (isObject(prop)) {\r\n      // 批量更新配置信息\r\n      extend(attrs, prop)\r\n\r\n      return this\r\n    } else if (arguments.length === 0) {\r\n      // 不传递参数，直接返回整个\r\n      return attrs\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    return this\r\n  }\r\n\r\n  refresh() {\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    this.removeListeners()\r\n    return this\r\n  }\r\n\r\n  reload(options) {\r\n    let attrs = this.attr()\r\n\r\n    if (options) {\r\n      attrs = this.attr(options)\r\n    }\r\n\r\n    this.destroy().initialize(attrs)\r\n\r\n    return this\r\n  }\r\n\r\n  $emit(event, data) {\r\n    publish(event, data)\r\n    return this\r\n  }\r\n\r\n  $on(event, callback) {\r\n    subscribe(event, callback, this)\r\n    return this\r\n  }\r\n\r\n  $off(event, callback) {\r\n    unsubscribe(event, callback)\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Component\r\n","import hasOwn from './hasOwn'\r\n\r\n/**\r\n * 扩展对象\r\n * ========================================================================\r\n * @method extend\r\n * @param {Object} origin\r\n * @param {Object} source\r\n */\r\nconst extend = (origin, source) => {\r\n  const keys = Object.keys(source)\r\n\r\n  keys.forEach((prop) => {\r\n    if (hasOwn(source, prop)) {\r\n      origin[prop] = source[prop]\r\n    }\r\n  })\r\n}\r\n\r\nexport default extend\r\n","import isFunction from '../../utils/types/isFunction'\r\nimport guid from '../../utils/lang/guid'\r\n\r\nimport _subscribers from './_subscribers'\r\n\r\n/**\r\n * 订阅主题，并给出处理器函数\r\n * ========================================================================\r\n * @method on\r\n * @param {String} topic - （必须）主题名称\r\n * @param {Function} handler - （必须）主题的处理器函数\r\n * @param {Object} [context] - （可选）指定 this 执行上下文\r\n * @return {String} - 唯一的 token 字符串，例如：'guid-1'。\r\n */\r\nconst on = (topic, handler, context = null) => {\r\n  const token = guid()\r\n  let subject = typeof topic === 'symbol' ? topic.toString() : topic\r\n\r\n  if (!isFunction(handler)) {\r\n    return ''\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (!_subscribers[subject]) {\r\n    _subscribers[subject] = []\r\n  }\r\n\r\n  _subscribers[subject].push({\r\n    topic: subject,\r\n    callback: handler,\r\n    context,\r\n    token\r\n  })\r\n\r\n  return token\r\n}\r\n\r\nexport default on\r\n","/**\r\n * timeSlice.js 时间切片功能函数\r\n * ====================================================\r\n * Created By: Yaohaixiao\r\n * Update: 2023.09.04\r\n */\r\nimport isFunction from '../../utils/types/isFunction'\r\nimport later from './later'\r\n\r\nconst queue = []\r\nlet isHandling\r\nlet done\r\n\r\n// Shim from https://developers.google.com/web/updates/2015/08/using-requestidlecallback\r\nif (typeof window.requestIdleCallback === 'undefined') {\r\n  window.requestIdleCallback = function (cb) {\r\n    const start = Date.now()\r\n    return later(function () {\r\n      cb({\r\n        didTimeout: false,\r\n        timeRemaining: function () {\r\n          return Math.max(0, 50 - (Date.now() - start))\r\n        }\r\n      })\r\n    }, 10)\r\n  }\r\n\r\n  window.cancelIdleCallback = function (id) {\r\n    clearTimeout(id)\r\n  }\r\n}\r\n\r\nfunction runIdle(idleDeadline) {\r\n  while (idleDeadline.timeRemaining() > 0 && queue.length) {\r\n    const fn = queue.shift()\r\n\r\n    if (!isFunction(fn)) {\r\n      return false\r\n    }\r\n\r\n    fn()\r\n  }\r\n\r\n  if (queue.length) {\r\n    isHandling = requestIdleCallback(runIdle)\r\n  } else {\r\n    isHandling = 0\r\n\r\n    if (isFunction(done)) {\r\n      done()\r\n      done = null\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 时间切片功能函数：主要用于优化长时任务的性能，将长时任务分解成\r\n * 多个短时间任务\r\n * ====================================================\r\n * @param {Function} fn - 需要在空闲时执行的回调函数\r\n * @param {Function} afterComplete - queen 的\r\n * @return {(function(): (boolean|undefined))|*|boolean}\r\n */\r\nconst timeSlice = (fn, afterComplete = null) => {\r\n  queue.push(fn)\r\n\r\n  if (isFunction(afterComplete)) {\r\n    done = afterComplete\r\n  }\r\n\r\n  if (!isHandling) {\r\n    requestIdleCallback(runIdle)\r\n  }\r\n}\r\n\r\nexport default timeSlice\r\n","import createElement from '../../utils/dom/createElement'\r\nimport timeSlice from '../../utils/lang/timeSlice'\r\n\r\nconst _paintChapters = ($list, chapters, showCode = false) => {\r\n  const LIMIT = 400\r\n  const count = chapters.length\r\n  const clones = [...chapters]\r\n  const paint = (parts) => {\r\n    const byId = (id) => $list.querySelector(`#${id}`)\r\n    parts.forEach((chapter) => {\r\n      const pid = chapter.pid\r\n      const id = chapter.id\r\n      const code = chapter.code\r\n      const rel = chapter.rel\r\n      const children = []\r\n      const $text = createElement(\r\n        'span',\r\n        {\r\n          className: 'outline-navigator__text'\r\n        },\r\n        chapter.text\r\n      )\r\n      let $link\r\n      let $code\r\n      let $li\r\n      let $subject\r\n      let $chapter\r\n\r\n      if (showCode) {\r\n        $code = createElement(\r\n          'span',\r\n          {\r\n            className: 'outline-navigator__code',\r\n            'data-id': id\r\n          },\r\n          chapter.code\r\n        )\r\n\r\n        children.push($code)\r\n      }\r\n\r\n      children.push($text)\r\n\r\n      const linkAttrs = {\r\n        id: `chapter__anchor-${id}`,\r\n        className: 'outline-navigator__anchor',\r\n        href: '#' + rel,\r\n        rel: rel,\r\n        'data-id': id\r\n      }\r\n\r\n      if (showCode) {\r\n        linkAttrs['data-code'] = code\r\n      }\r\n\r\n      $link = createElement('a', linkAttrs, children)\r\n\r\n      const liAttrs = {\r\n        id: `chapter-${id}`,\r\n        className: 'outline-navigator__item',\r\n        'data-id': id\r\n      }\r\n\r\n      if (showCode) {\r\n        liAttrs['data-code'] = code\r\n      }\r\n\r\n      $li = createElement('li', liAttrs, $link)\r\n\r\n      if (pid === -1) {\r\n        $list.appendChild($li)\r\n      } else {\r\n        $chapter = byId(`chapter-${pid}`)\r\n        $subject = byId(`subject-${pid}`)\r\n\r\n        if (!$subject) {\r\n          $subject = createElement(\r\n            'ul',\r\n            {\r\n              id: 'subject-' + pid,\r\n              className: 'outline-navigator__subject'\r\n            },\r\n            $li\r\n          )\r\n\r\n          $chapter.appendChild($subject)\r\n        } else {\r\n          $subject.appendChild($li)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  // 在大量 DOM 菜单绘制的时候，使用 TIME SLICE 拆分绘制任务\r\n  // 以避免一次绘制大量 DOM 导致占用资源过高，导致卡死\r\n  if (count > LIMIT) {\r\n    // 同步绘制\r\n    paint(clones.splice(0, LIMIT))\r\n\r\n    // 剩余的采用 timeSlice 机制绘制\r\n    while (clones.length > 0) {\r\n      const once = clones.splice(0, LIMIT)\r\n      timeSlice(() => {\r\n        paint(once)\r\n      })\r\n    }\r\n  } else {\r\n    paint(clones)\r\n  }\r\n}\r\n\r\nexport default _paintChapters\r\n","import isString from '../utils/types/isString'\r\nimport isFunction from '../utils/types/isFunction'\r\nimport isElement from '../utils/types/isElement'\r\nimport later from '../utils/lang/later'\r\nimport cloneDeep from '../utils/lang/cloneDeep'\r\n\r\nimport at from '../utils/event/at'\r\nimport on from '../utils/event/on'\r\nimport off from '../utils/event/off'\r\nimport stop from '../utils/event/stop'\r\n\r\nimport createElement from '../utils/dom/createElement'\r\nimport scrollTo from '../utils/dom/scrollTo'\r\nimport addClass from '../utils/dom/addClass'\r\nimport intersection from '../utils/dom/intersection'\r\nimport removeClass from '../utils/dom/removeClass'\r\nimport offsetTop from '../utils/dom/offsetTop'\r\nimport getStyle from '../utils/dom/getStyle'\r\nimport setProperty from '../utils/dom/setProperty'\r\nimport inBounding from '../utils/dom/inBounding'\r\nimport getScrollElement from '../utils/dom/getScrollElement'\r\n\r\nimport Component from '../base/component'\r\n\r\nimport _paintChapters from './utils/_paintChapters'\r\n\r\nconst HIDDEN = 'outline-navigator_hidden'\r\nconst EXPANDED = 'outline-navigator_expanded'\r\nconst FOLDED = 'outline-navigator_folded'\r\n\r\nclass Navigator extends Component {\r\n  constructor(options) {\r\n    super()\r\n\r\n    this.name = 'navigator'\r\n    this._default()\r\n\r\n    this.scrollTimer = null\r\n    this.resizeTimer = null\r\n    this.observerTimer = null\r\n    this.Observer = null\r\n\r\n    if (options) {\r\n      this.initialize(options)\r\n    }\r\n  }\r\n\r\n  _default() {\r\n    this.attrs = cloneDeep(Navigator.DEFAULTS)\r\n\r\n    this.$el = null\r\n    this.$title = null\r\n    this.$main = null\r\n    this.$list = null\r\n    this.$placeholder = null\r\n    this.$parentElement = null\r\n    this.$scrollElement = null\r\n    this.$active = null\r\n\r\n    this.chapters = []\r\n    this.active = 0\r\n    this.offsetWidth = 0\r\n    this.offsetTop = 0\r\n    this.playing = false\r\n    this.closed = false\r\n\r\n    return this\r\n  }\r\n\r\n  initialize(options) {\r\n    let created\r\n    let parentElement\r\n    let scrollElement\r\n    let $parent\r\n\r\n    this.attr(options)\r\n\r\n    created = this.attr('created')\r\n    parentElement = this.attr('parentElement')\r\n    scrollElement = this.attr('scrollElement')\r\n\r\n    if (isString(parentElement)) {\r\n      $parent = document.querySelector(parentElement)\r\n    } else if (isElement(parentElement)) {\r\n      $parent = parentElement\r\n    }\r\n    this.$parentElement = $parent\r\n    this.$scrollElement = getScrollElement(scrollElement)\r\n\r\n    this.chapters = this.attr('chapters')\r\n    this.closed = this.attr('closed')\r\n    this.active = this.attr('active')\r\n\r\n    if (isFunction(created)) {\r\n      created.call(this)\r\n    }\r\n\r\n    if (this.chapters.length < 1) {\r\n      return this\r\n    }\r\n\r\n    this.render().addListeners()\r\n\r\n    this.$active = document.querySelector(`#chapter-${this.active}`)\r\n\r\n    return this\r\n  }\r\n\r\n  isClosed() {\r\n    return this.closed\r\n  }\r\n\r\n  isSticky() {\r\n    const position = this.attr('position')\r\n    return position === 'sticky'\r\n  }\r\n\r\n  isFixed() {\r\n    const position = this.attr('position')\r\n    return position === 'fixed'\r\n  }\r\n\r\n  isInside() {\r\n    return this.isFixed() || this.isSticky()\r\n  }\r\n\r\n  isOutside() {\r\n    return !this.isInside()\r\n  }\r\n\r\n  count() {\r\n    return this.chapters.length\r\n  }\r\n\r\n  _paintEdge() {\r\n    const $fragment = document.createDocumentFragment()\r\n    const STICKY = 'outline-navigator_sticky'\r\n    const title = this.attr('title')\r\n    const animationCurrent = this.attr('animationCurrent')\r\n    const customClass = this.attr('customClass')\r\n    const $parentElement = this.$parentElement\r\n    const children = []\r\n    const contents = []\r\n    let $title = null\r\n    let $el\r\n    let $main\r\n    let $list\r\n    let $placeholder\r\n\r\n    if (!$parentElement) {\r\n      return this\r\n    }\r\n\r\n    if (this.isInside() && title) {\r\n      $title = createElement(\r\n        'h2',\r\n        {\r\n          className: 'outline-navigator__title'\r\n        },\r\n        title\r\n      )\r\n      this.$title = $title\r\n      contents.push($title)\r\n    }\r\n\r\n    $list = createElement('ul', {\r\n      // 为优化性能，添加了 _fixed 和 _hidden\r\n      // fixed 为了让 $list 脱离流布局\r\n      // hidden 让 $list 不可见\r\n      className: `outline-navigator__list`\r\n    })\r\n    this.$list = $list\r\n    children.push($list)\r\n\r\n    if (animationCurrent) {\r\n      $placeholder = createElement('div', {\r\n        className: 'outline-navigator__placeholder'\r\n      })\r\n      this.$placeholder = $placeholder\r\n      children.push($placeholder)\r\n    }\r\n\r\n    $main = createElement(\r\n      'div',\r\n      {\r\n        className: 'outline-navigator__main'\r\n      },\r\n      children\r\n    )\r\n    this.$main = $main\r\n    contents.push($main)\r\n\r\n    $el = createElement(\r\n      'nav',\r\n      {\r\n        id: 'outline-navigator',\r\n        className: `outline-navigator ${HIDDEN}`\r\n      },\r\n      contents\r\n    )\r\n    this.$el = $el\r\n\r\n    if (this.isSticky()) {\r\n      this.calculateStickyHeight()\r\n      addClass($el, STICKY)\r\n    }\r\n\r\n    if (customClass) {\r\n      addClass($el, customClass)\r\n    }\r\n    $fragment.appendChild($el)\r\n    $parentElement.appendChild($fragment)\r\n\r\n    return this\r\n  }\r\n\r\n  render() {\r\n    const mounted = this.attr('mounted')\r\n    const $parentElement = this.$parentElement\r\n    const chapters = this.chapters\r\n    const count = this.count()\r\n    let $el\r\n\r\n    if (!$parentElement || chapters.length < 1) {\r\n      return this\r\n    }\r\n\r\n    if (this.isInside()) {\r\n      addClass($parentElement, 'outline-navigator-parent')\r\n    }\r\n\r\n    this._paintEdge()\r\n    $el = this.$el\r\n\r\n    this._paint(chapters)\r\n\r\n    later(() => {\r\n      this.highlight(this.active)\r\n    }, 60)\r\n\r\n    this.offsetTop = offsetTop($el)\r\n    this.offsetWidth = $el.offsetWidth\r\n\r\n    if (this.isFixed()) {\r\n      this.sticky()\r\n      setProperty('--outline-navigator-width', `${this.offsetWidth}px`)\r\n    }\r\n\r\n    if (isFunction(mounted)) {\r\n      mounted.call(this)\r\n    }\r\n\r\n    if (count < 400) {\r\n      this.onObserver()\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  erase() {\r\n    this.$list.innerHTML = ''\r\n\r\n    return this\r\n  }\r\n\r\n  _paint(chapters) {\r\n    const showCode = this.attr('showCode')\r\n    const $el = this.$el\r\n    const $list = this.$list\r\n\r\n    _paintChapters($list, chapters, showCode)\r\n    removeClass($el, HIDDEN)\r\n    addClass($el, EXPANDED)\r\n\r\n    return this\r\n  }\r\n\r\n  _remove() {\r\n    this.$parentElement.removeChild(this.$el)\r\n    return this\r\n  }\r\n\r\n  refresh(chapters) {\r\n    const $el = this.$el\r\n\r\n    removeClass($el, HIDDEN)\r\n    this.erase()._paint(chapters)\r\n\r\n    return this\r\n  }\r\n\r\n  _getPlaceholderOffset(index) {\r\n    const $main = this.$main\r\n    const $list = this.$list\r\n    const $anchor = $list.querySelector('.outline-navigator__anchor')\r\n    const mainPaddingTop = parseInt(getStyle($main, 'padding-top'), 10)\r\n    const mainBorderTop = parseInt(getStyle($main, 'border-top-width'), 10)\r\n    const placeholderPaddingTop = parseInt(getStyle($list, 'padding-top'), 10)\r\n    const placeholderMarginTop = parseInt(getStyle($list, 'margin-top'), 10)\r\n    const placeholderBorderTop = parseInt(\r\n      getStyle($list, 'border-top-width'),\r\n      10\r\n    )\r\n    let height = $anchor.offsetHeight\r\n    let offsetTop = 0\r\n    let top\r\n\r\n    if (mainPaddingTop) {\r\n      offsetTop += mainPaddingTop\r\n    }\r\n\r\n    if (placeholderPaddingTop) {\r\n      offsetTop += placeholderPaddingTop\r\n    }\r\n\r\n    if (placeholderMarginTop) {\r\n      offsetTop += placeholderMarginTop\r\n    }\r\n\r\n    if (mainBorderTop) {\r\n      offsetTop += mainBorderTop\r\n    }\r\n\r\n    if (placeholderBorderTop) {\r\n      offsetTop += placeholderBorderTop\r\n    }\r\n\r\n    top = height * index\r\n\r\n    return offsetTop + top\r\n  }\r\n\r\n  positionPlaceholder(index) {\r\n    const $list = this.$list\r\n    const $placeholder = this.$placeholder\r\n    const $anchor = $list.querySelector('.outline-navigator__anchor')\r\n    const animationCurrent = this.attr('animationCurrent')\r\n    const height = $anchor.offsetHeight\r\n    let offsetTop = 0\r\n\r\n    if (!animationCurrent) {\r\n      return this\r\n    }\r\n\r\n    offsetTop = this._getPlaceholderOffset(index)\r\n\r\n    $placeholder.style.cssText = `transform: translateY(${offsetTop}px);height:${height}px;`\r\n\r\n    return this\r\n  }\r\n\r\n  highlight(id) {\r\n    const $el = this.$el\r\n    const animationCurrent = this.attr('animationCurrent')\r\n    const position = this.attr('position')\r\n    const ACTIVE = 'outline-navigator_active'\r\n    const HIGHLIGHT = 'outline-navigator_highlight'\r\n    let $parent = position === 'relative' ? this.$parentElement : this.$main\r\n    let $anchor = null\r\n    let placeholderOffsetTop = 0\r\n\r\n    if (!$el) {\r\n      return this\r\n    }\r\n\r\n    $anchor = $el.querySelector(`#chapter__anchor-${id}`)\r\n\r\n    if (!$anchor) {\r\n      return this\r\n    }\r\n\r\n    this.active = parseInt($anchor.getAttribute('data-id'), 10)\r\n\r\n    if (this.$active) {\r\n      removeClass(this.$active, HIGHLIGHT)\r\n      removeClass(this.$active, ACTIVE)\r\n    }\r\n\r\n    this.$active = $anchor\r\n    addClass(this.$active, ACTIVE)\r\n\r\n    if (animationCurrent) {\r\n      this.positionPlaceholder(this.active)\r\n    } else {\r\n      addClass(this.$active, HIGHLIGHT)\r\n    }\r\n\r\n    later(() => {\r\n      if (!inBounding(this.$active, $parent)) {\r\n        placeholderOffsetTop = this._getPlaceholderOffset(this.active)\r\n        scrollTo($parent, placeholderOffsetTop)\r\n      }\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  sticky() {\r\n    const afterSticky = this.attr('afterSticky')\r\n    const FIXED = 'outline-navigator_fixed'\r\n    const $el = this.$el\r\n    const top = this.offsetTop\r\n    const scrollTop = this.$scrollElement.scrollTop\r\n    let isStickying\r\n\r\n    if (!this.isFixed()) {\r\n      return this\r\n    }\r\n\r\n    isStickying = scrollTop >= top\r\n\r\n    if (isStickying) {\r\n      addClass($el, FIXED)\r\n    } else {\r\n      removeClass($el, FIXED)\r\n    }\r\n\r\n    if (isFunction(afterSticky)) {\r\n      afterSticky.call(this, this.isClosed(), isStickying)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  calculateStickyHeight() {\r\n    const documentElement = document.documentElement\r\n    const height = Math.max(\r\n      documentElement.clientHeight || 0,\r\n      window.innerHeight || 0\r\n    )\r\n    setProperty('--outline-sticky-height', `${height}px`)\r\n    return this\r\n  }\r\n\r\n  scrollTo(top, after) {\r\n    const el = this.$scrollElement\r\n\r\n    scrollTo(el, top, after)\r\n\r\n    return this\r\n  }\r\n\r\n  show() {\r\n    const opened = this.attr('afterOpened')\r\n    const count = this.count()\r\n    const $el = this.$el\r\n    const $parent = this.$parentElement\r\n\r\n    if (this.isInside()) {\r\n      if (count > 800) {\r\n        removeClass($parent, HIDDEN)\r\n      } else {\r\n        removeClass($parent, HIDDEN)\r\n        later(() => {\r\n          removeClass($parent, FOLDED)\r\n          addClass($parent, EXPANDED)\r\n        }, 30)\r\n      }\r\n    } else {\r\n      removeClass($el, HIDDEN)\r\n    }\r\n    this.closed = false\r\n\r\n    if (isFunction(opened)) {\r\n      opened.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  hide() {\r\n    const closed = this.attr('afterClosed')\r\n    const count = this.count()\r\n    const $el = this.$el\r\n    const $parent = this.$parentElement\r\n\r\n    if (this.isInside()) {\r\n      if (count > 800) {\r\n        addClass($parent, HIDDEN)\r\n      } else {\r\n        addClass($parent, FOLDED)\r\n        removeClass($parent, EXPANDED)\r\n        later(() => {\r\n          addClass($parent, HIDDEN)\r\n        })\r\n      }\r\n    } else {\r\n      addClass($el, HIDDEN)\r\n    }\r\n    this.closed = true\r\n\r\n    if (isFunction(closed)) {\r\n      closed.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  toggle() {\r\n    const afterToggle = this.attr('afterToggle')\r\n    const top = this.offsetTop\r\n    const scrollTop = this.$scrollElement.scrollTop\r\n    let isStickying\r\n\r\n    if (this.isClosed()) {\r\n      this.show()\r\n    } else {\r\n      this.hide()\r\n    }\r\n\r\n    if (isFunction(afterToggle)) {\r\n      later(() => {\r\n        isStickying = scrollTop >= top\r\n        afterToggle.call(this, this.isClosed(), isStickying)\r\n      })\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  destroy() {\r\n    const beforeDestroy = this.attr('beforeDestroy')\r\n    const afterDestroy = this.attr('afterDestroy')\r\n\r\n    if (isFunction(beforeDestroy)) {\r\n      beforeDestroy.call(this)\r\n    }\r\n\r\n    this.removeListeners()._remove()._default()\r\n\r\n    if (this.scrollTimer) {\r\n      clearTimeout(this.scrollTimer)\r\n      this.scrollTimer = null\r\n    }\r\n\r\n    if (this.resizeTimer) {\r\n      clearTimeout(this.resizeTimer)\r\n      this.resizeTimer = null\r\n    }\r\n\r\n    if (this.observerTimer) {\r\n      clearTimeout(this.observerTimer)\r\n      this.observerTimer = null\r\n    }\r\n\r\n    if (this.Observer) {\r\n      this.Observer = null\r\n    }\r\n\r\n    if (isFunction(afterDestroy)) {\r\n      afterDestroy.call(this)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  onObserver() {\r\n    const selector = this.attr('selector')\r\n\r\n    this.Observer = intersection(\r\n      ($heading) => {\r\n        const id = $heading.getAttribute('data-id')\r\n\r\n        if (this.playing) {\r\n          return false\r\n        }\r\n\r\n        if (this.observerTimer) {\r\n          clearTimeout(this.observerTimer)\r\n        }\r\n\r\n        this.observerTimer = later(() => {\r\n          this.highlight(id)\r\n        }, 100)\r\n      },\r\n      {\r\n        selector,\r\n        context: this\r\n      }\r\n    )\r\n\r\n    return this\r\n  }\r\n\r\n  onSelect(evt) {\r\n    const stickyHeight = this.attr('stickyHeight')\r\n    const $anchor = evt.delegateTarget\r\n    const id = $anchor.getAttribute('data-id')\r\n    const headingId = $anchor.href.split('#')[1]\r\n    const $heading = document.querySelector(`#${headingId}`)\r\n    const top = offsetTop($heading) - (stickyHeight + 10)\r\n    const min = 0\r\n    const max = this.$scrollElement.scrollHeight\r\n    const afterScroll = this.attr('afterScroll')\r\n    const after = () => {\r\n      if (isFunction(afterScroll)) {\r\n        afterScroll.call(this, 'chapter')\r\n      }\r\n\r\n      later(() => {\r\n        this.playing = false\r\n        this.$emit('toolbar:update', {\r\n          top,\r\n          min,\r\n          max\r\n        })\r\n      })\r\n    }\r\n\r\n    this.playing = true\r\n    if (this.isFixed()) {\r\n      this.sticky()\r\n      later(() => {\r\n        this.scrollTo(top, after)\r\n        this.highlight(id)\r\n      }, 10)\r\n    } else {\r\n      this.scrollTo(top, after)\r\n      this.highlight(id)\r\n    }\r\n\r\n    stop(evt)\r\n\r\n    return this\r\n  }\r\n\r\n  onScroll() {\r\n    const $scrollElement = this.$scrollElement\r\n\r\n    if (this.scrollTimer) {\r\n      clearTimeout(this.scrollTimer)\r\n    }\r\n\r\n    this.scrollTimer = later(() => {\r\n      const top = $scrollElement.scrollTop\r\n      const min = 0\r\n      const max = $scrollElement.scrollHeight - $scrollElement.clientHeight\r\n\r\n      if (this.isFixed()) {\r\n        this.sticky()\r\n      }\r\n\r\n      this.$emit('toolbar:update', {\r\n        top,\r\n        min,\r\n        max\r\n      })\r\n    }, 100)\r\n\r\n    return this\r\n  }\r\n\r\n  onResize() {\r\n    // 添加判断\r\n    if (!this.isSticky()) {\r\n      return this\r\n    }\r\n\r\n    if (this.resizeTimer) {\r\n      clearTimeout(this.resizeTimer)\r\n    }\r\n\r\n    this.resizeTimer = later(() => {\r\n      this.calculateStickyHeight()\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  onRefresh(chapters) {\r\n    this.refresh(chapters)\r\n\r\n    return this\r\n  }\r\n\r\n  addListeners() {\r\n    const $el = this.$el\r\n    const $scrollElement = this.$scrollElement\r\n    const tagName = $scrollElement.tagName.toLowerCase()\r\n    let $element = $scrollElement\r\n\r\n    if (this.count() < 1) {\r\n      return this\r\n    }\r\n\r\n    if (tagName === 'html' || tagName === 'body') {\r\n      $element = window\r\n    }\r\n\r\n    on($el, '.outline-navigator__anchor', 'click', this.onSelect, this, true)\r\n    at($element, 'scroll', this.onScroll, this, true)\r\n    if (this.isSticky()) {\r\n      at(window, 'resize', this.onResize, this, true)\r\n    }\r\n\r\n    this.$on('anchors:all:paint', this.onObserver, this)\r\n    this.$on('navigator:refresh', this.onRefresh, this)\r\n\r\n    return this\r\n  }\r\n\r\n  removeListeners() {\r\n    const selector = this.attr('selector')\r\n    const $el = this.$el\r\n    const $scrollElement = this.$scrollElement\r\n    const tagName = $scrollElement.tagName.toLowerCase()\r\n    let $element = $scrollElement\r\n\r\n    if (this.count() < 1) {\r\n      return this\r\n    }\r\n\r\n    if (tagName === 'html' || tagName === 'body') {\r\n      $element = window\r\n    }\r\n\r\n    off($el, 'click', this.onSelect)\r\n    off($element, 'scroll', this.onScroll)\r\n    if (this.isSticky()) {\r\n      off(window, 'resize', this.onResize)\r\n    }\r\n    this.$off('anchors:all:paint')\r\n    this.$off('navigator:refresh')\r\n\r\n    if (this.Observer) {\r\n      document.querySelectorAll(selector).forEach((section) => {\r\n        this.Observer.unobserve(section)\r\n      })\r\n    }\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nNavigator.DEFAULTS = (() => {\r\n  const OPTIONS = {\r\n    parentElement: '',\r\n    scrollElement: '',\r\n    selector: '.outline-heading',\r\n    active: 0,\r\n    closed: false,\r\n    showCode: true,\r\n    animationCurrent: true,\r\n    position: 'relative',\r\n    stickyHeight: 0,\r\n    chapters: [],\r\n    created: null,\r\n    mounted: null,\r\n    afterClosed: null,\r\n    afterOpened: null,\r\n    afterScroll: null,\r\n    beforeDestroy: null,\r\n    afterDestroy: null,\r\n    afterSticky: null\r\n  }\r\n\r\n  return cloneDeep(OPTIONS)\r\n})()\r\n\r\nexport default Navigator\r\n","import isString from '../types/isString'\r\nimport isElement from '../types/isElement'\r\n\r\n/**\r\n * 通过给的 scrollElement 参数，获取滚动 DOM 元素\r\n * ========================================================================\r\n * @method getScrollElement\r\n * @param {String|HTMLElement} scrollElement\r\n * @returns {Element}\r\n * @private\r\n */\r\nconst getScrollElement = (scrollElement = null) => {\r\n  let $rootElements\r\n  let $scrollElement\r\n\r\n  if (!scrollElement) {\r\n    $rootElements = document.querySelectorAll('html,body')\r\n    $scrollElement =\r\n      $rootElements[0].scrollTop - $rootElements[1].scrollTop >= 0\r\n        ? $rootElements[0]\r\n        : $rootElements[1]\r\n  } else {\r\n    if (isString(scrollElement)) {\r\n      $scrollElement = document.querySelector(scrollElement)\r\n    } else if (isElement(scrollElement)) {\r\n      $scrollElement = scrollElement\r\n    }\r\n  }\r\n\r\n  return $scrollElement\r\n}\r\n\r\nexport default getScrollElement\r\n","import isElement from '../types/isElement'\r\n\r\n/**\r\n * 检测某个 DOM 节点的位置是否在另个一个 DOM 节点范围内\r\n * ========================================================================\r\n * @method inBounding\r\n * @param {HTMLElement} child\r\n * @param {HTMLElement} parent\r\n * @return {Boolean}\r\n */\r\nconst inBounding = (child, parent) => {\r\n  let isInBounding = false\r\n  let parentRect\r\n  let childRect\r\n\r\n  if (!isElement(child) || !isElement(parent)) {\r\n    return isInBounding\r\n  }\r\n\r\n  parentRect = parent.getBoundingClientRect()\r\n  childRect = child.getBoundingClientRect()\r\n\r\n  isInBounding = !!(\r\n    childRect.top >= parentRect.top &&\r\n    childRect.right <= parentRect.right &&\r\n    childRect.bottom <= parentRect.bottom &&\r\n    childRect.left >= parentRect.left\r\n  )\r\n\r\n  return isInBounding\r\n}\r\n\r\nexport default inBounding\r\n","import isFunction from '../types/isFunction'\r\nimport isElement from '../types/isElement'\r\n\r\n/**\r\n * 通用的 IntersectionObserver 观察者处理器\r\n * ========================================================================\r\n * @method intersection\r\n * @param {Function} fn\r\n * @param {Object} [props]\r\n * @param {Object|HTMLElement} [props.root]\r\n * @param {String} [props.selector]\r\n * @param {Object} [props.context]\r\n * @param {String} [props.attr]\r\n * @param {String} [props.rootMargin]\r\n */\r\nconst intersection = (fn, props = {}) => {\r\n  const root = props.root || null\r\n  const selector = props.selector || '.outline-heading'\r\n  const context = props.context || null\r\n  const rootMargin = props.rootMargin || '0px 0px -90% 0px'\r\n  const options = {\r\n    rootMargin: rootMargin\r\n  }\r\n  // eslint-disable-next-line compat/compat\r\n  const Observer = new IntersectionObserver((entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.intersectionRatio > 0) {\r\n        if (isFunction(fn)) {\r\n          fn.call(context || entry.target, entry.target)\r\n        }\r\n      }\r\n    })\r\n  }, options)\r\n  const $root = isElement(root) ? root : document\r\n\r\n  if (root) {\r\n    options.root = root\r\n  }\r\n\r\n  $root.querySelectorAll(selector).forEach((section) => {\r\n    Observer.observe(section)\r\n  })\r\n\r\n  return Observer\r\n}\r\n\r\nexport default intersection\r\n","/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stop\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stop = function (evt) {\r\n  evt.stopPropagation()\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default stop\r\n"],"names":["isString","str","toString","val","Object","prototype","apply","isFunction","isObject","o","isElement","nodeName","tagName","nodeType","later","fn","delay","setTimeout","isArray","Array","cloneDeep","obj","clone","from","assign","keys","forEach","key","CAPTURE_EVENTS","_off","el","type","capture","indexOf","_delegateListener","listeners","_listeners","index","length","listener","i","handler","splice","_delete","removeEventListener","purgeElement","recurse","$element","document","querySelector","$children","childNodes","getListeners","filter","arguments","$child","off","at","data","context","once","evt","overrideContext","call","push","addEventListener","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","on","target","getTarget","delegateTarget","closest","ctx","includeCTX","startsWith","isDOM","isHTMLCollection","fragment","isTextNode","hasOwn","prop","hasOwnProperty","hasClass","className","pattern","RegExp","allClass","classList","contains","exec","addClass","_classList","add","split","name","setAttributes","attrs","attr","value","setAttribute","toLowerCase","style","cssText","innerHTML","innerText","createElement","children","$fragment","createDocumentFragment","$el","isValidChild","child","append","createTextNode","appendChild","every","easeInQuad","x","scrollTo","scrollElement","top","afterStop","$scrollElement","_getScrollElement","$rootElements","querySelectorAll","scrollTop","step","distance","MAX_HEIGHT","scrollHeight","MAX_TOP","stop","play","requestAnimationFrame","removeClass","remove","offsetTop","offsetParent","getStyle","ruleName","getComputedStyle","setProperty","documentElement","_subscribers","_hasDirectSubscribersFor","topic","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","async","execute","subscriber","message","callback","deliver","guid","uuid","prefix","_removeSubscriber","token","subject","execution","j","_removeSubscriberByToken","Component","constructor","options","this","initialize","render","addListeners","origin","source","extend","refresh","destroy","removeListeners","reload","$emit","event","publish","$on","subscribe","$off","unsubscribe","queue","isHandling","done","runIdle","idleDeadline","timeRemaining","shift","requestIdleCallback","window","cb","start","Date","now","didTimeout","Math","max","cancelIdleCallback","id","clearTimeout","timeSlice","afterComplete","_paintChapters","$list","chapters","showCode","count","clones","_maybeArrayLike","_toConsumableArray","paint","parts","byId","chapter","pid","code","rel","$text","text","$link","$code","$li","$subject","$chapter","linkAttrs","href","liAttrs","HIDDEN","EXPANDED","FOLDED","Navigator","super","_default","scrollTimer","resizeTimer","observerTimer","Observer","DEFAULTS","$title","$main","$placeholder","$parentElement","$active","active","offsetWidth","playing","closed","created","parentElement","$parent","getScrollElement","isClosed","isSticky","isFixed","isInside","isOutside","_paintEdge","title","animationCurrent","customClass","contents","calculateStickyHeight","mounted","_paint","highlight","sticky","onObserver","erase","_remove","removeChild","_getPlaceholderOffset","$anchor","mainPaddingTop","parseInt","mainBorderTop","placeholderPaddingTop","placeholderMarginTop","placeholderBorderTop","offsetHeight","positionPlaceholder","height","ACTIVE","HIGHLIGHT","placeholderOffsetTop","getAttribute","inBounding","parent","parentRect","childRect","isInBounding","getBoundingClientRect","right","bottom","left","afterSticky","FIXED","isStickying","clientHeight","innerHeight","after","show","opened","hide","toggle","afterToggle","beforeDestroy","afterDestroy","intersection","props","root","rootMargin","IntersectionObserver","entries","entry","intersectionRatio","$root","section","observe","$heading","onSelect","stickyHeight","headingId","afterScroll","min","stopPropagation","preventDefault","onScroll","onResize","onRefresh","unobserve","afterClosed","afterOpened"],"mappings":"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"}